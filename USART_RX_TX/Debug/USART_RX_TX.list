
USART_RX_TX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003898  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003a90  08003a90  00013a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003aa8  08003aa8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003aa8  08003aa8  00013aa8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ab0  08003ab0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ab0  08003ab0  00013ab0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ab4  08003ab4  00013ab4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003ab8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  2000000c  08003ac4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  08003ac4  000200b8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b35e  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017d0  00000000  00000000  0002b398  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000748  00000000  00000000  0002cb68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006c0  00000000  00000000  0002d2b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026581  00000000  00000000  0002d970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009f25  00000000  00000000  00053ef1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f01d0  00000000  00000000  0005de16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014dfe6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001cd8  00000000  00000000  0014e03c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08003a78 	.word	0x08003a78

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08003a78 	.word	0x08003a78

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b96e 	b.w	800053c <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	4604      	mov	r4, r0
 8000280:	468c      	mov	ip, r1
 8000282:	2b00      	cmp	r3, #0
 8000284:	f040 8083 	bne.w	800038e <__udivmoddi4+0x116>
 8000288:	428a      	cmp	r2, r1
 800028a:	4617      	mov	r7, r2
 800028c:	d947      	bls.n	800031e <__udivmoddi4+0xa6>
 800028e:	fab2 f282 	clz	r2, r2
 8000292:	b142      	cbz	r2, 80002a6 <__udivmoddi4+0x2e>
 8000294:	f1c2 0020 	rsb	r0, r2, #32
 8000298:	fa24 f000 	lsr.w	r0, r4, r0
 800029c:	4091      	lsls	r1, r2
 800029e:	4097      	lsls	r7, r2
 80002a0:	ea40 0c01 	orr.w	ip, r0, r1
 80002a4:	4094      	lsls	r4, r2
 80002a6:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80002aa:	0c23      	lsrs	r3, r4, #16
 80002ac:	fbbc f6f8 	udiv	r6, ip, r8
 80002b0:	fa1f fe87 	uxth.w	lr, r7
 80002b4:	fb08 c116 	mls	r1, r8, r6, ip
 80002b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002bc:	fb06 f10e 	mul.w	r1, r6, lr
 80002c0:	4299      	cmp	r1, r3
 80002c2:	d909      	bls.n	80002d8 <__udivmoddi4+0x60>
 80002c4:	18fb      	adds	r3, r7, r3
 80002c6:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ca:	f080 8119 	bcs.w	8000500 <__udivmoddi4+0x288>
 80002ce:	4299      	cmp	r1, r3
 80002d0:	f240 8116 	bls.w	8000500 <__udivmoddi4+0x288>
 80002d4:	3e02      	subs	r6, #2
 80002d6:	443b      	add	r3, r7
 80002d8:	1a5b      	subs	r3, r3, r1
 80002da:	b2a4      	uxth	r4, r4
 80002dc:	fbb3 f0f8 	udiv	r0, r3, r8
 80002e0:	fb08 3310 	mls	r3, r8, r0, r3
 80002e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002ec:	45a6      	cmp	lr, r4
 80002ee:	d909      	bls.n	8000304 <__udivmoddi4+0x8c>
 80002f0:	193c      	adds	r4, r7, r4
 80002f2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002f6:	f080 8105 	bcs.w	8000504 <__udivmoddi4+0x28c>
 80002fa:	45a6      	cmp	lr, r4
 80002fc:	f240 8102 	bls.w	8000504 <__udivmoddi4+0x28c>
 8000300:	3802      	subs	r0, #2
 8000302:	443c      	add	r4, r7
 8000304:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000308:	eba4 040e 	sub.w	r4, r4, lr
 800030c:	2600      	movs	r6, #0
 800030e:	b11d      	cbz	r5, 8000318 <__udivmoddi4+0xa0>
 8000310:	40d4      	lsrs	r4, r2
 8000312:	2300      	movs	r3, #0
 8000314:	e9c5 4300 	strd	r4, r3, [r5]
 8000318:	4631      	mov	r1, r6
 800031a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800031e:	b902      	cbnz	r2, 8000322 <__udivmoddi4+0xaa>
 8000320:	deff      	udf	#255	; 0xff
 8000322:	fab2 f282 	clz	r2, r2
 8000326:	2a00      	cmp	r2, #0
 8000328:	d150      	bne.n	80003cc <__udivmoddi4+0x154>
 800032a:	1bcb      	subs	r3, r1, r7
 800032c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000330:	fa1f f887 	uxth.w	r8, r7
 8000334:	2601      	movs	r6, #1
 8000336:	fbb3 fcfe 	udiv	ip, r3, lr
 800033a:	0c21      	lsrs	r1, r4, #16
 800033c:	fb0e 331c 	mls	r3, lr, ip, r3
 8000340:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000344:	fb08 f30c 	mul.w	r3, r8, ip
 8000348:	428b      	cmp	r3, r1
 800034a:	d907      	bls.n	800035c <__udivmoddi4+0xe4>
 800034c:	1879      	adds	r1, r7, r1
 800034e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000352:	d202      	bcs.n	800035a <__udivmoddi4+0xe2>
 8000354:	428b      	cmp	r3, r1
 8000356:	f200 80e9 	bhi.w	800052c <__udivmoddi4+0x2b4>
 800035a:	4684      	mov	ip, r0
 800035c:	1ac9      	subs	r1, r1, r3
 800035e:	b2a3      	uxth	r3, r4
 8000360:	fbb1 f0fe 	udiv	r0, r1, lr
 8000364:	fb0e 1110 	mls	r1, lr, r0, r1
 8000368:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800036c:	fb08 f800 	mul.w	r8, r8, r0
 8000370:	45a0      	cmp	r8, r4
 8000372:	d907      	bls.n	8000384 <__udivmoddi4+0x10c>
 8000374:	193c      	adds	r4, r7, r4
 8000376:	f100 33ff 	add.w	r3, r0, #4294967295
 800037a:	d202      	bcs.n	8000382 <__udivmoddi4+0x10a>
 800037c:	45a0      	cmp	r8, r4
 800037e:	f200 80d9 	bhi.w	8000534 <__udivmoddi4+0x2bc>
 8000382:	4618      	mov	r0, r3
 8000384:	eba4 0408 	sub.w	r4, r4, r8
 8000388:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800038c:	e7bf      	b.n	800030e <__udivmoddi4+0x96>
 800038e:	428b      	cmp	r3, r1
 8000390:	d909      	bls.n	80003a6 <__udivmoddi4+0x12e>
 8000392:	2d00      	cmp	r5, #0
 8000394:	f000 80b1 	beq.w	80004fa <__udivmoddi4+0x282>
 8000398:	2600      	movs	r6, #0
 800039a:	e9c5 0100 	strd	r0, r1, [r5]
 800039e:	4630      	mov	r0, r6
 80003a0:	4631      	mov	r1, r6
 80003a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a6:	fab3 f683 	clz	r6, r3
 80003aa:	2e00      	cmp	r6, #0
 80003ac:	d14a      	bne.n	8000444 <__udivmoddi4+0x1cc>
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d302      	bcc.n	80003b8 <__udivmoddi4+0x140>
 80003b2:	4282      	cmp	r2, r0
 80003b4:	f200 80b8 	bhi.w	8000528 <__udivmoddi4+0x2b0>
 80003b8:	1a84      	subs	r4, r0, r2
 80003ba:	eb61 0103 	sbc.w	r1, r1, r3
 80003be:	2001      	movs	r0, #1
 80003c0:	468c      	mov	ip, r1
 80003c2:	2d00      	cmp	r5, #0
 80003c4:	d0a8      	beq.n	8000318 <__udivmoddi4+0xa0>
 80003c6:	e9c5 4c00 	strd	r4, ip, [r5]
 80003ca:	e7a5      	b.n	8000318 <__udivmoddi4+0xa0>
 80003cc:	f1c2 0320 	rsb	r3, r2, #32
 80003d0:	fa20 f603 	lsr.w	r6, r0, r3
 80003d4:	4097      	lsls	r7, r2
 80003d6:	fa01 f002 	lsl.w	r0, r1, r2
 80003da:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003de:	40d9      	lsrs	r1, r3
 80003e0:	4330      	orrs	r0, r6
 80003e2:	0c03      	lsrs	r3, r0, #16
 80003e4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003e8:	fa1f f887 	uxth.w	r8, r7
 80003ec:	fb0e 1116 	mls	r1, lr, r6, r1
 80003f0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003f4:	fb06 f108 	mul.w	r1, r6, r8
 80003f8:	4299      	cmp	r1, r3
 80003fa:	fa04 f402 	lsl.w	r4, r4, r2
 80003fe:	d909      	bls.n	8000414 <__udivmoddi4+0x19c>
 8000400:	18fb      	adds	r3, r7, r3
 8000402:	f106 3cff 	add.w	ip, r6, #4294967295
 8000406:	f080 808d 	bcs.w	8000524 <__udivmoddi4+0x2ac>
 800040a:	4299      	cmp	r1, r3
 800040c:	f240 808a 	bls.w	8000524 <__udivmoddi4+0x2ac>
 8000410:	3e02      	subs	r6, #2
 8000412:	443b      	add	r3, r7
 8000414:	1a5b      	subs	r3, r3, r1
 8000416:	b281      	uxth	r1, r0
 8000418:	fbb3 f0fe 	udiv	r0, r3, lr
 800041c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000420:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000424:	fb00 f308 	mul.w	r3, r0, r8
 8000428:	428b      	cmp	r3, r1
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x1c4>
 800042c:	1879      	adds	r1, r7, r1
 800042e:	f100 3cff 	add.w	ip, r0, #4294967295
 8000432:	d273      	bcs.n	800051c <__udivmoddi4+0x2a4>
 8000434:	428b      	cmp	r3, r1
 8000436:	d971      	bls.n	800051c <__udivmoddi4+0x2a4>
 8000438:	3802      	subs	r0, #2
 800043a:	4439      	add	r1, r7
 800043c:	1acb      	subs	r3, r1, r3
 800043e:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000442:	e778      	b.n	8000336 <__udivmoddi4+0xbe>
 8000444:	f1c6 0c20 	rsb	ip, r6, #32
 8000448:	fa03 f406 	lsl.w	r4, r3, r6
 800044c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000450:	431c      	orrs	r4, r3
 8000452:	fa20 f70c 	lsr.w	r7, r0, ip
 8000456:	fa01 f306 	lsl.w	r3, r1, r6
 800045a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800045e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000462:	431f      	orrs	r7, r3
 8000464:	0c3b      	lsrs	r3, r7, #16
 8000466:	fbb1 f9fe 	udiv	r9, r1, lr
 800046a:	fa1f f884 	uxth.w	r8, r4
 800046e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000472:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000476:	fb09 fa08 	mul.w	sl, r9, r8
 800047a:	458a      	cmp	sl, r1
 800047c:	fa02 f206 	lsl.w	r2, r2, r6
 8000480:	fa00 f306 	lsl.w	r3, r0, r6
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x220>
 8000486:	1861      	adds	r1, r4, r1
 8000488:	f109 30ff 	add.w	r0, r9, #4294967295
 800048c:	d248      	bcs.n	8000520 <__udivmoddi4+0x2a8>
 800048e:	458a      	cmp	sl, r1
 8000490:	d946      	bls.n	8000520 <__udivmoddi4+0x2a8>
 8000492:	f1a9 0902 	sub.w	r9, r9, #2
 8000496:	4421      	add	r1, r4
 8000498:	eba1 010a 	sub.w	r1, r1, sl
 800049c:	b2bf      	uxth	r7, r7
 800049e:	fbb1 f0fe 	udiv	r0, r1, lr
 80004a2:	fb0e 1110 	mls	r1, lr, r0, r1
 80004a6:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80004aa:	fb00 f808 	mul.w	r8, r0, r8
 80004ae:	45b8      	cmp	r8, r7
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x24a>
 80004b2:	19e7      	adds	r7, r4, r7
 80004b4:	f100 31ff 	add.w	r1, r0, #4294967295
 80004b8:	d22e      	bcs.n	8000518 <__udivmoddi4+0x2a0>
 80004ba:	45b8      	cmp	r8, r7
 80004bc:	d92c      	bls.n	8000518 <__udivmoddi4+0x2a0>
 80004be:	3802      	subs	r0, #2
 80004c0:	4427      	add	r7, r4
 80004c2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004c6:	eba7 0708 	sub.w	r7, r7, r8
 80004ca:	fba0 8902 	umull	r8, r9, r0, r2
 80004ce:	454f      	cmp	r7, r9
 80004d0:	46c6      	mov	lr, r8
 80004d2:	4649      	mov	r1, r9
 80004d4:	d31a      	bcc.n	800050c <__udivmoddi4+0x294>
 80004d6:	d017      	beq.n	8000508 <__udivmoddi4+0x290>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x27a>
 80004da:	ebb3 020e 	subs.w	r2, r3, lr
 80004de:	eb67 0701 	sbc.w	r7, r7, r1
 80004e2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004e6:	40f2      	lsrs	r2, r6
 80004e8:	ea4c 0202 	orr.w	r2, ip, r2
 80004ec:	40f7      	lsrs	r7, r6
 80004ee:	e9c5 2700 	strd	r2, r7, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	462e      	mov	r6, r5
 80004fc:	4628      	mov	r0, r5
 80004fe:	e70b      	b.n	8000318 <__udivmoddi4+0xa0>
 8000500:	4606      	mov	r6, r0
 8000502:	e6e9      	b.n	80002d8 <__udivmoddi4+0x60>
 8000504:	4618      	mov	r0, r3
 8000506:	e6fd      	b.n	8000304 <__udivmoddi4+0x8c>
 8000508:	4543      	cmp	r3, r8
 800050a:	d2e5      	bcs.n	80004d8 <__udivmoddi4+0x260>
 800050c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000510:	eb69 0104 	sbc.w	r1, r9, r4
 8000514:	3801      	subs	r0, #1
 8000516:	e7df      	b.n	80004d8 <__udivmoddi4+0x260>
 8000518:	4608      	mov	r0, r1
 800051a:	e7d2      	b.n	80004c2 <__udivmoddi4+0x24a>
 800051c:	4660      	mov	r0, ip
 800051e:	e78d      	b.n	800043c <__udivmoddi4+0x1c4>
 8000520:	4681      	mov	r9, r0
 8000522:	e7b9      	b.n	8000498 <__udivmoddi4+0x220>
 8000524:	4666      	mov	r6, ip
 8000526:	e775      	b.n	8000414 <__udivmoddi4+0x19c>
 8000528:	4630      	mov	r0, r6
 800052a:	e74a      	b.n	80003c2 <__udivmoddi4+0x14a>
 800052c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000530:	4439      	add	r1, r7
 8000532:	e713      	b.n	800035c <__udivmoddi4+0xe4>
 8000534:	3802      	subs	r0, #2
 8000536:	443c      	add	r4, r7
 8000538:	e724      	b.n	8000384 <__udivmoddi4+0x10c>
 800053a:	bf00      	nop

0800053c <__aeabi_idiv0>:
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop

08000540 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000544:	f000 fa61 	bl	8000a0a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000548:	f000 f80e 	bl	8000568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054c:	f000 f898 	bl	8000680 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000550:	f000 f866 	bl	8000620 <MX_USART3_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_UART_Receive_IT(&huart3, (uint8_t*)buff, 5);
 8000554:	2205      	movs	r2, #5
 8000556:	4902      	ldr	r1, [pc, #8]	; (8000560 <main+0x20>)
 8000558:	4802      	ldr	r0, [pc, #8]	; (8000564 <main+0x24>)
 800055a:	f001 ff6b 	bl	8002434 <HAL_UART_Receive_IT>
 800055e:	e7f9      	b.n	8000554 <main+0x14>
 8000560:	20000028 	.word	0x20000028
 8000564:	20000030 	.word	0x20000030

08000568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	b094      	sub	sp, #80	; 0x50
 800056c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800056e:	f107 031c 	add.w	r3, r7, #28
 8000572:	2234      	movs	r2, #52	; 0x34
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f003 fa6e 	bl	8003a58 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800057c:	f107 0308 	add.w	r3, r7, #8
 8000580:	2200      	movs	r2, #0
 8000582:	601a      	str	r2, [r3, #0]
 8000584:	605a      	str	r2, [r3, #4]
 8000586:	609a      	str	r2, [r3, #8]
 8000588:	60da      	str	r2, [r3, #12]
 800058a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800058c:	4b22      	ldr	r3, [pc, #136]	; (8000618 <SystemClock_Config+0xb0>)
 800058e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000590:	4a21      	ldr	r2, [pc, #132]	; (8000618 <SystemClock_Config+0xb0>)
 8000592:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000596:	6413      	str	r3, [r2, #64]	; 0x40
 8000598:	4b1f      	ldr	r3, [pc, #124]	; (8000618 <SystemClock_Config+0xb0>)
 800059a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800059c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a0:	607b      	str	r3, [r7, #4]
 80005a2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005a4:	4b1d      	ldr	r3, [pc, #116]	; (800061c <SystemClock_Config+0xb4>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005ac:	4a1b      	ldr	r2, [pc, #108]	; (800061c <SystemClock_Config+0xb4>)
 80005ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005b2:	6013      	str	r3, [r2, #0]
 80005b4:	4b19      	ldr	r3, [pc, #100]	; (800061c <SystemClock_Config+0xb4>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005bc:	603b      	str	r3, [r7, #0]
 80005be:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c0:	2302      	movs	r3, #2
 80005c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005c4:	2301      	movs	r3, #1
 80005c6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005c8:	2310      	movs	r3, #16
 80005ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005cc:	2300      	movs	r3, #0
 80005ce:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d0:	f107 031c 	add.w	r3, r7, #28
 80005d4:	4618      	mov	r0, r3
 80005d6:	f000 fdc5 	bl	8001164 <HAL_RCC_OscConfig>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 80005e0:	f000 f912 	bl	8000808 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e4:	230f      	movs	r3, #15
 80005e6:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005e8:	2300      	movs	r3, #0
 80005ea:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005f0:	2300      	movs	r3, #0
 80005f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f4:	2300      	movs	r3, #0
 80005f6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005f8:	f107 0308 	add.w	r3, r7, #8
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f001 f85e 	bl	80016c0 <HAL_RCC_ClockConfig>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800060a:	f000 f8fd 	bl	8000808 <Error_Handler>
  }
}
 800060e:	bf00      	nop
 8000610:	3750      	adds	r7, #80	; 0x50
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	40023800 	.word	0x40023800
 800061c:	40007000 	.word	0x40007000

08000620 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000624:	4b14      	ldr	r3, [pc, #80]	; (8000678 <MX_USART3_UART_Init+0x58>)
 8000626:	4a15      	ldr	r2, [pc, #84]	; (800067c <MX_USART3_UART_Init+0x5c>)
 8000628:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800062a:	4b13      	ldr	r3, [pc, #76]	; (8000678 <MX_USART3_UART_Init+0x58>)
 800062c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000630:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000632:	4b11      	ldr	r3, [pc, #68]	; (8000678 <MX_USART3_UART_Init+0x58>)
 8000634:	2200      	movs	r2, #0
 8000636:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000638:	4b0f      	ldr	r3, [pc, #60]	; (8000678 <MX_USART3_UART_Init+0x58>)
 800063a:	2200      	movs	r2, #0
 800063c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800063e:	4b0e      	ldr	r3, [pc, #56]	; (8000678 <MX_USART3_UART_Init+0x58>)
 8000640:	2200      	movs	r2, #0
 8000642:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000644:	4b0c      	ldr	r3, [pc, #48]	; (8000678 <MX_USART3_UART_Init+0x58>)
 8000646:	220c      	movs	r2, #12
 8000648:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800064a:	4b0b      	ldr	r3, [pc, #44]	; (8000678 <MX_USART3_UART_Init+0x58>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000650:	4b09      	ldr	r3, [pc, #36]	; (8000678 <MX_USART3_UART_Init+0x58>)
 8000652:	2200      	movs	r2, #0
 8000654:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000656:	4b08      	ldr	r3, [pc, #32]	; (8000678 <MX_USART3_UART_Init+0x58>)
 8000658:	2200      	movs	r2, #0
 800065a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800065c:	4b06      	ldr	r3, [pc, #24]	; (8000678 <MX_USART3_UART_Init+0x58>)
 800065e:	2200      	movs	r2, #0
 8000660:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000662:	4805      	ldr	r0, [pc, #20]	; (8000678 <MX_USART3_UART_Init+0x58>)
 8000664:	f001 fe2a 	bl	80022bc <HAL_UART_Init>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800066e:	f000 f8cb 	bl	8000808 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000672:	bf00      	nop
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	20000030 	.word	0x20000030
 800067c:	40004800 	.word	0x40004800

08000680 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000686:	4b0f      	ldr	r3, [pc, #60]	; (80006c4 <MX_GPIO_Init+0x44>)
 8000688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800068a:	4a0e      	ldr	r2, [pc, #56]	; (80006c4 <MX_GPIO_Init+0x44>)
 800068c:	f043 0308 	orr.w	r3, r3, #8
 8000690:	6313      	str	r3, [r2, #48]	; 0x30
 8000692:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <MX_GPIO_Init+0x44>)
 8000694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000696:	f003 0308 	and.w	r3, r3, #8
 800069a:	607b      	str	r3, [r7, #4]
 800069c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800069e:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <MX_GPIO_Init+0x44>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	4a08      	ldr	r2, [pc, #32]	; (80006c4 <MX_GPIO_Init+0x44>)
 80006a4:	f043 0301 	orr.w	r3, r3, #1
 80006a8:	6313      	str	r3, [r2, #48]	; 0x30
 80006aa:	4b06      	ldr	r3, [pc, #24]	; (80006c4 <MX_GPIO_Init+0x44>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	f003 0301 	and.w	r3, r3, #1
 80006b2:	603b      	str	r3, [r7, #0]
 80006b4:	683b      	ldr	r3, [r7, #0]

}
 80006b6:	bf00      	nop
 80006b8:	370c      	adds	r7, #12
 80006ba:	46bd      	mov	sp, r7
 80006bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c0:	4770      	bx	lr
 80006c2:	bf00      	nop
 80006c4:	40023800 	.word	0x40023800

080006c8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b088      	sub	sp, #32
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
          if(huart == &huart3)
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	4a4a      	ldr	r2, [pc, #296]	; (80007fc <HAL_UART_RxCpltCallback+0x134>)
 80006d4:	4293      	cmp	r3, r2
 80006d6:	f040 808c 	bne.w	80007f2 <HAL_UART_RxCpltCallback+0x12a>
          {
        	  if(buff[0] == '1')
 80006da:	4b49      	ldr	r3, [pc, #292]	; (8000800 <HAL_UART_RxCpltCallback+0x138>)
 80006dc:	781b      	ldrb	r3, [r3, #0]
 80006de:	2b31      	cmp	r3, #49	; 0x31
 80006e0:	d106      	bne.n	80006f0 <HAL_UART_RxCpltCallback+0x28>
        	  {
        		  HAL_UART_Transmit_IT(&huart3, (uint8_t*)(buff+1), 4);
 80006e2:	4b48      	ldr	r3, [pc, #288]	; (8000804 <HAL_UART_RxCpltCallback+0x13c>)
 80006e4:	2204      	movs	r2, #4
 80006e6:	4619      	mov	r1, r3
 80006e8:	4844      	ldr	r0, [pc, #272]	; (80007fc <HAL_UART_RxCpltCallback+0x134>)
 80006ea:	f001 fe35 	bl	8002358 <HAL_UART_Transmit_IT>
        		  }
        		  HAL_UART_Transmit_IT(&huart3, (uint8_t*)buf3, 4);
  			  }

          }
}
 80006ee:	e080      	b.n	80007f2 <HAL_UART_RxCpltCallback+0x12a>
        	  else if(buff[0] == '2')
 80006f0:	4b43      	ldr	r3, [pc, #268]	; (8000800 <HAL_UART_RxCpltCallback+0x138>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	2b32      	cmp	r3, #50	; 0x32
 80006f6:	d13c      	bne.n	8000772 <HAL_UART_RxCpltCallback+0xaa>
        		  char buf2[5] = {};
 80006f8:	2300      	movs	r3, #0
 80006fa:	613b      	str	r3, [r7, #16]
 80006fc:	2300      	movs	r3, #0
 80006fe:	753b      	strb	r3, [r7, #20]
        		  strcpy(buf2, buff+1);
 8000700:	4a40      	ldr	r2, [pc, #256]	; (8000804 <HAL_UART_RxCpltCallback+0x13c>)
 8000702:	f107 0310 	add.w	r3, r7, #16
 8000706:	4611      	mov	r1, r2
 8000708:	4618      	mov	r0, r3
 800070a:	f003 f9ad 	bl	8003a68 <strcpy>
        		  for(int i=0; i<strlen(buf2); i++)
 800070e:	2300      	movs	r3, #0
 8000710:	61fb      	str	r3, [r7, #28]
 8000712:	e01d      	b.n	8000750 <HAL_UART_RxCpltCallback+0x88>
        		          if(buf2[i]>='a' && buf2[i]<='z')
 8000714:	f107 0210 	add.w	r2, r7, #16
 8000718:	69fb      	ldr	r3, [r7, #28]
 800071a:	4413      	add	r3, r2
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	2b60      	cmp	r3, #96	; 0x60
 8000720:	d913      	bls.n	800074a <HAL_UART_RxCpltCallback+0x82>
 8000722:	f107 0210 	add.w	r2, r7, #16
 8000726:	69fb      	ldr	r3, [r7, #28]
 8000728:	4413      	add	r3, r2
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	2b7a      	cmp	r3, #122	; 0x7a
 800072e:	d80c      	bhi.n	800074a <HAL_UART_RxCpltCallback+0x82>
        		              buf2[i] = buf2[i] - 32;
 8000730:	f107 0210 	add.w	r2, r7, #16
 8000734:	69fb      	ldr	r3, [r7, #28]
 8000736:	4413      	add	r3, r2
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	3b20      	subs	r3, #32
 800073c:	b2d9      	uxtb	r1, r3
 800073e:	f107 0210 	add.w	r2, r7, #16
 8000742:	69fb      	ldr	r3, [r7, #28]
 8000744:	4413      	add	r3, r2
 8000746:	460a      	mov	r2, r1
 8000748:	701a      	strb	r2, [r3, #0]
        		  for(int i=0; i<strlen(buf2); i++)
 800074a:	69fb      	ldr	r3, [r7, #28]
 800074c:	3301      	adds	r3, #1
 800074e:	61fb      	str	r3, [r7, #28]
 8000750:	f107 0310 	add.w	r3, r7, #16
 8000754:	4618      	mov	r0, r3
 8000756:	f7ff fd6f 	bl	8000238 <strlen>
 800075a:	4602      	mov	r2, r0
 800075c:	69fb      	ldr	r3, [r7, #28]
 800075e:	429a      	cmp	r2, r3
 8000760:	d8d8      	bhi.n	8000714 <HAL_UART_RxCpltCallback+0x4c>
        		  HAL_UART_Transmit_IT(&huart3, (uint8_t*)buf2, 4);
 8000762:	f107 0310 	add.w	r3, r7, #16
 8000766:	2204      	movs	r2, #4
 8000768:	4619      	mov	r1, r3
 800076a:	4824      	ldr	r0, [pc, #144]	; (80007fc <HAL_UART_RxCpltCallback+0x134>)
 800076c:	f001 fdf4 	bl	8002358 <HAL_UART_Transmit_IT>
}
 8000770:	e03f      	b.n	80007f2 <HAL_UART_RxCpltCallback+0x12a>
        	  else if(buff[0] == '3')
 8000772:	4b23      	ldr	r3, [pc, #140]	; (8000800 <HAL_UART_RxCpltCallback+0x138>)
 8000774:	781b      	ldrb	r3, [r3, #0]
 8000776:	2b33      	cmp	r3, #51	; 0x33
 8000778:	d13b      	bne.n	80007f2 <HAL_UART_RxCpltCallback+0x12a>
        		  char buf3[5] = {};
 800077a:	2300      	movs	r3, #0
 800077c:	60bb      	str	r3, [r7, #8]
 800077e:	2300      	movs	r3, #0
 8000780:	733b      	strb	r3, [r7, #12]
        		  strcpy(buf3, buff+1);
 8000782:	4a20      	ldr	r2, [pc, #128]	; (8000804 <HAL_UART_RxCpltCallback+0x13c>)
 8000784:	f107 0308 	add.w	r3, r7, #8
 8000788:	4611      	mov	r1, r2
 800078a:	4618      	mov	r0, r3
 800078c:	f003 f96c 	bl	8003a68 <strcpy>
        		  for(int i=0; i<strlen(buf3); i++)
 8000790:	2300      	movs	r3, #0
 8000792:	61bb      	str	r3, [r7, #24]
 8000794:	e01d      	b.n	80007d2 <HAL_UART_RxCpltCallback+0x10a>
        		          if(buf3[i]>='A' && buf3[i]<='Z')
 8000796:	f107 0208 	add.w	r2, r7, #8
 800079a:	69bb      	ldr	r3, [r7, #24]
 800079c:	4413      	add	r3, r2
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	2b40      	cmp	r3, #64	; 0x40
 80007a2:	d913      	bls.n	80007cc <HAL_UART_RxCpltCallback+0x104>
 80007a4:	f107 0208 	add.w	r2, r7, #8
 80007a8:	69bb      	ldr	r3, [r7, #24]
 80007aa:	4413      	add	r3, r2
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	2b5a      	cmp	r3, #90	; 0x5a
 80007b0:	d80c      	bhi.n	80007cc <HAL_UART_RxCpltCallback+0x104>
        		              buf3[i] = buf3[i] + 32;
 80007b2:	f107 0208 	add.w	r2, r7, #8
 80007b6:	69bb      	ldr	r3, [r7, #24]
 80007b8:	4413      	add	r3, r2
 80007ba:	781b      	ldrb	r3, [r3, #0]
 80007bc:	3320      	adds	r3, #32
 80007be:	b2d9      	uxtb	r1, r3
 80007c0:	f107 0208 	add.w	r2, r7, #8
 80007c4:	69bb      	ldr	r3, [r7, #24]
 80007c6:	4413      	add	r3, r2
 80007c8:	460a      	mov	r2, r1
 80007ca:	701a      	strb	r2, [r3, #0]
        		  for(int i=0; i<strlen(buf3); i++)
 80007cc:	69bb      	ldr	r3, [r7, #24]
 80007ce:	3301      	adds	r3, #1
 80007d0:	61bb      	str	r3, [r7, #24]
 80007d2:	f107 0308 	add.w	r3, r7, #8
 80007d6:	4618      	mov	r0, r3
 80007d8:	f7ff fd2e 	bl	8000238 <strlen>
 80007dc:	4602      	mov	r2, r0
 80007de:	69bb      	ldr	r3, [r7, #24]
 80007e0:	429a      	cmp	r2, r3
 80007e2:	d8d8      	bhi.n	8000796 <HAL_UART_RxCpltCallback+0xce>
        		  HAL_UART_Transmit_IT(&huart3, (uint8_t*)buf3, 4);
 80007e4:	f107 0308 	add.w	r3, r7, #8
 80007e8:	2204      	movs	r2, #4
 80007ea:	4619      	mov	r1, r3
 80007ec:	4803      	ldr	r0, [pc, #12]	; (80007fc <HAL_UART_RxCpltCallback+0x134>)
 80007ee:	f001 fdb3 	bl	8002358 <HAL_UART_Transmit_IT>
}
 80007f2:	bf00      	nop
 80007f4:	3720      	adds	r7, #32
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	20000030 	.word	0x20000030
 8000800:	20000028 	.word	0x20000028
 8000804:	20000029 	.word	0x20000029

08000808 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800080c:	b672      	cpsid	i
}
 800080e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000810:	e7fe      	b.n	8000810 <Error_Handler+0x8>
	...

08000814 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800081a:	4b0f      	ldr	r3, [pc, #60]	; (8000858 <HAL_MspInit+0x44>)
 800081c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081e:	4a0e      	ldr	r2, [pc, #56]	; (8000858 <HAL_MspInit+0x44>)
 8000820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000824:	6413      	str	r3, [r2, #64]	; 0x40
 8000826:	4b0c      	ldr	r3, [pc, #48]	; (8000858 <HAL_MspInit+0x44>)
 8000828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800082a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000832:	4b09      	ldr	r3, [pc, #36]	; (8000858 <HAL_MspInit+0x44>)
 8000834:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000836:	4a08      	ldr	r2, [pc, #32]	; (8000858 <HAL_MspInit+0x44>)
 8000838:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800083c:	6453      	str	r3, [r2, #68]	; 0x44
 800083e:	4b06      	ldr	r3, [pc, #24]	; (8000858 <HAL_MspInit+0x44>)
 8000840:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000842:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000846:	603b      	str	r3, [r7, #0]
 8000848:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800084a:	bf00      	nop
 800084c:	370c      	adds	r7, #12
 800084e:	46bd      	mov	sp, r7
 8000850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000854:	4770      	bx	lr
 8000856:	bf00      	nop
 8000858:	40023800 	.word	0x40023800

0800085c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b0ae      	sub	sp, #184	; 0xb8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000864:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
 8000872:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000874:	f107 0314 	add.w	r3, r7, #20
 8000878:	2290      	movs	r2, #144	; 0x90
 800087a:	2100      	movs	r1, #0
 800087c:	4618      	mov	r0, r3
 800087e:	f003 f8eb 	bl	8003a58 <memset>
  if(huart->Instance==USART3)
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	681b      	ldr	r3, [r3, #0]
 8000886:	4a26      	ldr	r2, [pc, #152]	; (8000920 <HAL_UART_MspInit+0xc4>)
 8000888:	4293      	cmp	r3, r2
 800088a:	d144      	bne.n	8000916 <HAL_UART_MspInit+0xba>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800088c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000890:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000892:	2300      	movs	r3, #0
 8000894:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000896:	f107 0314 	add.w	r3, r7, #20
 800089a:	4618      	mov	r0, r3
 800089c:	f001 f8e6 	bl	8001a6c <HAL_RCCEx_PeriphCLKConfig>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80008a6:	f7ff ffaf 	bl	8000808 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80008aa:	4b1e      	ldr	r3, [pc, #120]	; (8000924 <HAL_UART_MspInit+0xc8>)
 80008ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ae:	4a1d      	ldr	r2, [pc, #116]	; (8000924 <HAL_UART_MspInit+0xc8>)
 80008b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80008b4:	6413      	str	r3, [r2, #64]	; 0x40
 80008b6:	4b1b      	ldr	r3, [pc, #108]	; (8000924 <HAL_UART_MspInit+0xc8>)
 80008b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80008be:	613b      	str	r3, [r7, #16]
 80008c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80008c2:	4b18      	ldr	r3, [pc, #96]	; (8000924 <HAL_UART_MspInit+0xc8>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	4a17      	ldr	r2, [pc, #92]	; (8000924 <HAL_UART_MspInit+0xc8>)
 80008c8:	f043 0308 	orr.w	r3, r3, #8
 80008cc:	6313      	str	r3, [r2, #48]	; 0x30
 80008ce:	4b15      	ldr	r3, [pc, #84]	; (8000924 <HAL_UART_MspInit+0xc8>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	f003 0308 	and.w	r3, r3, #8
 80008d6:	60fb      	str	r3, [r7, #12]
 80008d8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80008da:	f44f 7340 	mov.w	r3, #768	; 0x300
 80008de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e2:	2302      	movs	r3, #2
 80008e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ee:	2303      	movs	r3, #3
 80008f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80008f4:	2307      	movs	r3, #7
 80008f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008fa:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80008fe:	4619      	mov	r1, r3
 8000900:	4809      	ldr	r0, [pc, #36]	; (8000928 <HAL_UART_MspInit+0xcc>)
 8000902:	f000 fa83 	bl	8000e0c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000906:	2200      	movs	r2, #0
 8000908:	2100      	movs	r1, #0
 800090a:	2027      	movs	r0, #39	; 0x27
 800090c:	f000 f9b5 	bl	8000c7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000910:	2027      	movs	r0, #39	; 0x27
 8000912:	f000 f9ce 	bl	8000cb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000916:	bf00      	nop
 8000918:	37b8      	adds	r7, #184	; 0xb8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40004800 	.word	0x40004800
 8000924:	40023800 	.word	0x40023800
 8000928:	40020c00 	.word	0x40020c00

0800092c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000930:	e7fe      	b.n	8000930 <NMI_Handler+0x4>

08000932 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000932:	b480      	push	{r7}
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000936:	e7fe      	b.n	8000936 <HardFault_Handler+0x4>

08000938 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800093c:	e7fe      	b.n	800093c <MemManage_Handler+0x4>

0800093e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800093e:	b480      	push	{r7}
 8000940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000942:	e7fe      	b.n	8000942 <BusFault_Handler+0x4>

08000944 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000948:	e7fe      	b.n	8000948 <UsageFault_Handler+0x4>

0800094a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800094a:	b480      	push	{r7}
 800094c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800094e:	bf00      	nop
 8000950:	46bd      	mov	sp, r7
 8000952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000956:	4770      	bx	lr

08000958 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800095c:	bf00      	nop
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr

08000966 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000966:	b480      	push	{r7}
 8000968:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800096a:	bf00      	nop
 800096c:	46bd      	mov	sp, r7
 800096e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000972:	4770      	bx	lr

08000974 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000978:	f000 f884 	bl	8000a84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800097c:	bf00      	nop
 800097e:	bd80      	pop	{r7, pc}

08000980 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000984:	4802      	ldr	r0, [pc, #8]	; (8000990 <USART3_IRQHandler+0x10>)
 8000986:	f001 fda3 	bl	80024d0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800098a:	bf00      	nop
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	20000030 	.word	0x20000030

08000994 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000998:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <SystemInit+0x20>)
 800099a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800099e:	4a05      	ldr	r2, [pc, #20]	; (80009b4 <SystemInit+0x20>)
 80009a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr
 80009b2:	bf00      	nop
 80009b4:	e000ed00 	.word	0xe000ed00

080009b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80009b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009f0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009bc:	480d      	ldr	r0, [pc, #52]	; (80009f4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009be:	490e      	ldr	r1, [pc, #56]	; (80009f8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009c0:	4a0e      	ldr	r2, [pc, #56]	; (80009fc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009c4:	e002      	b.n	80009cc <LoopCopyDataInit>

080009c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ca:	3304      	adds	r3, #4

080009cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009d0:	d3f9      	bcc.n	80009c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009d2:	4a0b      	ldr	r2, [pc, #44]	; (8000a00 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009d4:	4c0b      	ldr	r4, [pc, #44]	; (8000a04 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009d8:	e001      	b.n	80009de <LoopFillZerobss>

080009da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009dc:	3204      	adds	r2, #4

080009de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009e0:	d3fb      	bcc.n	80009da <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009e2:	f7ff ffd7 	bl	8000994 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009e6:	f003 f813 	bl	8003a10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009ea:	f7ff fda9 	bl	8000540 <main>
  bx  lr    
 80009ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80009f0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80009f4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009f8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009fc:	08003ab8 	.word	0x08003ab8
  ldr r2, =_sbss
 8000a00:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a04:	200000b8 	.word	0x200000b8

08000a08 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a08:	e7fe      	b.n	8000a08 <ADC_IRQHandler>

08000a0a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a0a:	b580      	push	{r7, lr}
 8000a0c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a0e:	2003      	movs	r0, #3
 8000a10:	f000 f928 	bl	8000c64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a14:	200f      	movs	r0, #15
 8000a16:	f000 f805 	bl	8000a24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a1a:	f7ff fefb 	bl	8000814 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a1e:	2300      	movs	r3, #0
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a2c:	4b12      	ldr	r3, [pc, #72]	; (8000a78 <HAL_InitTick+0x54>)
 8000a2e:	681a      	ldr	r2, [r3, #0]
 8000a30:	4b12      	ldr	r3, [pc, #72]	; (8000a7c <HAL_InitTick+0x58>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	4619      	mov	r1, r3
 8000a36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a42:	4618      	mov	r0, r3
 8000a44:	f000 f943 	bl	8000cce <HAL_SYSTICK_Config>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a4e:	2301      	movs	r3, #1
 8000a50:	e00e      	b.n	8000a70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	2b0f      	cmp	r3, #15
 8000a56:	d80a      	bhi.n	8000a6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	6879      	ldr	r1, [r7, #4]
 8000a5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000a60:	f000 f90b 	bl	8000c7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a64:	4a06      	ldr	r2, [pc, #24]	; (8000a80 <HAL_InitTick+0x5c>)
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	e000      	b.n	8000a70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a6e:	2301      	movs	r3, #1
}
 8000a70:	4618      	mov	r0, r3
 8000a72:	3708      	adds	r7, #8
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	20000000 	.word	0x20000000
 8000a7c:	20000008 	.word	0x20000008
 8000a80:	20000004 	.word	0x20000004

08000a84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a88:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <HAL_IncTick+0x20>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <HAL_IncTick+0x24>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	4413      	add	r3, r2
 8000a94:	4a04      	ldr	r2, [pc, #16]	; (8000aa8 <HAL_IncTick+0x24>)
 8000a96:	6013      	str	r3, [r2, #0]
}
 8000a98:	bf00      	nop
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop
 8000aa4:	20000008 	.word	0x20000008
 8000aa8:	200000b4 	.word	0x200000b4

08000aac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  return uwTick;
 8000ab0:	4b03      	ldr	r3, [pc, #12]	; (8000ac0 <HAL_GetTick+0x14>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
}
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	200000b4 	.word	0x200000b4

08000ac4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b085      	sub	sp, #20
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	f003 0307 	and.w	r3, r3, #7
 8000ad2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ad4:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <__NVIC_SetPriorityGrouping+0x40>)
 8000ad6:	68db      	ldr	r3, [r3, #12]
 8000ad8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ada:	68ba      	ldr	r2, [r7, #8]
 8000adc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ae0:	4013      	ands	r3, r2
 8000ae2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ae8:	68bb      	ldr	r3, [r7, #8]
 8000aea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000aec:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <__NVIC_SetPriorityGrouping+0x44>)
 8000aee:	4313      	orrs	r3, r2
 8000af0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000af2:	4a04      	ldr	r2, [pc, #16]	; (8000b04 <__NVIC_SetPriorityGrouping+0x40>)
 8000af4:	68bb      	ldr	r3, [r7, #8]
 8000af6:	60d3      	str	r3, [r2, #12]
}
 8000af8:	bf00      	nop
 8000afa:	3714      	adds	r7, #20
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr
 8000b04:	e000ed00 	.word	0xe000ed00
 8000b08:	05fa0000 	.word	0x05fa0000

08000b0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b10:	4b04      	ldr	r3, [pc, #16]	; (8000b24 <__NVIC_GetPriorityGrouping+0x18>)
 8000b12:	68db      	ldr	r3, [r3, #12]
 8000b14:	0a1b      	lsrs	r3, r3, #8
 8000b16:	f003 0307 	and.w	r3, r3, #7
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr
 8000b24:	e000ed00 	.word	0xe000ed00

08000b28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	4603      	mov	r3, r0
 8000b30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	db0b      	blt.n	8000b52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b3a:	79fb      	ldrb	r3, [r7, #7]
 8000b3c:	f003 021f 	and.w	r2, r3, #31
 8000b40:	4907      	ldr	r1, [pc, #28]	; (8000b60 <__NVIC_EnableIRQ+0x38>)
 8000b42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b46:	095b      	lsrs	r3, r3, #5
 8000b48:	2001      	movs	r0, #1
 8000b4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000b4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b52:	bf00      	nop
 8000b54:	370c      	adds	r7, #12
 8000b56:	46bd      	mov	sp, r7
 8000b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5c:	4770      	bx	lr
 8000b5e:	bf00      	nop
 8000b60:	e000e100 	.word	0xe000e100

08000b64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	6039      	str	r1, [r7, #0]
 8000b6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	db0a      	blt.n	8000b8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	b2da      	uxtb	r2, r3
 8000b7c:	490c      	ldr	r1, [pc, #48]	; (8000bb0 <__NVIC_SetPriority+0x4c>)
 8000b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b82:	0112      	lsls	r2, r2, #4
 8000b84:	b2d2      	uxtb	r2, r2
 8000b86:	440b      	add	r3, r1
 8000b88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b8c:	e00a      	b.n	8000ba4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	b2da      	uxtb	r2, r3
 8000b92:	4908      	ldr	r1, [pc, #32]	; (8000bb4 <__NVIC_SetPriority+0x50>)
 8000b94:	79fb      	ldrb	r3, [r7, #7]
 8000b96:	f003 030f 	and.w	r3, r3, #15
 8000b9a:	3b04      	subs	r3, #4
 8000b9c:	0112      	lsls	r2, r2, #4
 8000b9e:	b2d2      	uxtb	r2, r2
 8000ba0:	440b      	add	r3, r1
 8000ba2:	761a      	strb	r2, [r3, #24]
}
 8000ba4:	bf00      	nop
 8000ba6:	370c      	adds	r7, #12
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	e000e100 	.word	0xe000e100
 8000bb4:	e000ed00 	.word	0xe000ed00

08000bb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b089      	sub	sp, #36	; 0x24
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	60f8      	str	r0, [r7, #12]
 8000bc0:	60b9      	str	r1, [r7, #8]
 8000bc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	f003 0307 	and.w	r3, r3, #7
 8000bca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bcc:	69fb      	ldr	r3, [r7, #28]
 8000bce:	f1c3 0307 	rsb	r3, r3, #7
 8000bd2:	2b04      	cmp	r3, #4
 8000bd4:	bf28      	it	cs
 8000bd6:	2304      	movcs	r3, #4
 8000bd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bda:	69fb      	ldr	r3, [r7, #28]
 8000bdc:	3304      	adds	r3, #4
 8000bde:	2b06      	cmp	r3, #6
 8000be0:	d902      	bls.n	8000be8 <NVIC_EncodePriority+0x30>
 8000be2:	69fb      	ldr	r3, [r7, #28]
 8000be4:	3b03      	subs	r3, #3
 8000be6:	e000      	b.n	8000bea <NVIC_EncodePriority+0x32>
 8000be8:	2300      	movs	r3, #0
 8000bea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bec:	f04f 32ff 	mov.w	r2, #4294967295
 8000bf0:	69bb      	ldr	r3, [r7, #24]
 8000bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf6:	43da      	mvns	r2, r3
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	401a      	ands	r2, r3
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c00:	f04f 31ff 	mov.w	r1, #4294967295
 8000c04:	697b      	ldr	r3, [r7, #20]
 8000c06:	fa01 f303 	lsl.w	r3, r1, r3
 8000c0a:	43d9      	mvns	r1, r3
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c10:	4313      	orrs	r3, r2
         );
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3724      	adds	r7, #36	; 0x24
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
	...

08000c20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	3b01      	subs	r3, #1
 8000c2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c30:	d301      	bcc.n	8000c36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c32:	2301      	movs	r3, #1
 8000c34:	e00f      	b.n	8000c56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c36:	4a0a      	ldr	r2, [pc, #40]	; (8000c60 <SysTick_Config+0x40>)
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	3b01      	subs	r3, #1
 8000c3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c3e:	210f      	movs	r1, #15
 8000c40:	f04f 30ff 	mov.w	r0, #4294967295
 8000c44:	f7ff ff8e 	bl	8000b64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c48:	4b05      	ldr	r3, [pc, #20]	; (8000c60 <SysTick_Config+0x40>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c4e:	4b04      	ldr	r3, [pc, #16]	; (8000c60 <SysTick_Config+0x40>)
 8000c50:	2207      	movs	r2, #7
 8000c52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c54:	2300      	movs	r3, #0
}
 8000c56:	4618      	mov	r0, r3
 8000c58:	3708      	adds	r7, #8
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	e000e010 	.word	0xe000e010

08000c64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b082      	sub	sp, #8
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c6c:	6878      	ldr	r0, [r7, #4]
 8000c6e:	f7ff ff29 	bl	8000ac4 <__NVIC_SetPriorityGrouping>
}
 8000c72:	bf00      	nop
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	b086      	sub	sp, #24
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	4603      	mov	r3, r0
 8000c82:	60b9      	str	r1, [r7, #8]
 8000c84:	607a      	str	r2, [r7, #4]
 8000c86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c8c:	f7ff ff3e 	bl	8000b0c <__NVIC_GetPriorityGrouping>
 8000c90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c92:	687a      	ldr	r2, [r7, #4]
 8000c94:	68b9      	ldr	r1, [r7, #8]
 8000c96:	6978      	ldr	r0, [r7, #20]
 8000c98:	f7ff ff8e 	bl	8000bb8 <NVIC_EncodePriority>
 8000c9c:	4602      	mov	r2, r0
 8000c9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ca2:	4611      	mov	r1, r2
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f7ff ff5d 	bl	8000b64 <__NVIC_SetPriority>
}
 8000caa:	bf00      	nop
 8000cac:	3718      	adds	r7, #24
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}

08000cb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cb2:	b580      	push	{r7, lr}
 8000cb4:	b082      	sub	sp, #8
 8000cb6:	af00      	add	r7, sp, #0
 8000cb8:	4603      	mov	r3, r0
 8000cba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff ff31 	bl	8000b28 <__NVIC_EnableIRQ>
}
 8000cc6:	bf00      	nop
 8000cc8:	3708      	adds	r7, #8
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b082      	sub	sp, #8
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	f7ff ffa2 	bl	8000c20 <SysTick_Config>
 8000cdc:	4603      	mov	r3, r0
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b084      	sub	sp, #16
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cf2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000cf4:	f7ff feda 	bl	8000aac <HAL_GetTick>
 8000cf8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000d00:	b2db      	uxtb	r3, r3
 8000d02:	2b02      	cmp	r3, #2
 8000d04:	d008      	beq.n	8000d18 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2280      	movs	r2, #128	; 0x80
 8000d0a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	2200      	movs	r2, #0
 8000d10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000d14:	2301      	movs	r3, #1
 8000d16:	e052      	b.n	8000dbe <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	681a      	ldr	r2, [r3, #0]
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	f022 0216 	bic.w	r2, r2, #22
 8000d26:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	695a      	ldr	r2, [r3, #20]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d36:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d103      	bne.n	8000d48 <HAL_DMA_Abort+0x62>
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d007      	beq.n	8000d58 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	681a      	ldr	r2, [r3, #0]
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f022 0208 	bic.w	r2, r2, #8
 8000d56:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	681a      	ldr	r2, [r3, #0]
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f022 0201 	bic.w	r2, r2, #1
 8000d66:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d68:	e013      	b.n	8000d92 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000d6a:	f7ff fe9f 	bl	8000aac <HAL_GetTick>
 8000d6e:	4602      	mov	r2, r0
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	1ad3      	subs	r3, r2, r3
 8000d74:	2b05      	cmp	r3, #5
 8000d76:	d90c      	bls.n	8000d92 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2220      	movs	r2, #32
 8000d7c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2203      	movs	r2, #3
 8000d82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2200      	movs	r2, #0
 8000d8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8000d8e:	2303      	movs	r3, #3
 8000d90:	e015      	b.n	8000dbe <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	f003 0301 	and.w	r3, r3, #1
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d1e4      	bne.n	8000d6a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000da4:	223f      	movs	r2, #63	; 0x3f
 8000da6:	409a      	lsls	r2, r3
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2201      	movs	r2, #1
 8000db0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	2200      	movs	r2, #0
 8000db8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8000dbc:	2300      	movs	r3, #0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	3710      	adds	r7, #16
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}

08000dc6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000dc6:	b480      	push	{r7}
 8000dc8:	b083      	sub	sp, #12
 8000dca:	af00      	add	r7, sp, #0
 8000dcc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000dd4:	b2db      	uxtb	r3, r3
 8000dd6:	2b02      	cmp	r3, #2
 8000dd8:	d004      	beq.n	8000de4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	2280      	movs	r2, #128	; 0x80
 8000dde:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000de0:	2301      	movs	r3, #1
 8000de2:	e00c      	b.n	8000dfe <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	2205      	movs	r2, #5
 8000de8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f022 0201 	bic.w	r2, r2, #1
 8000dfa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000dfc:	2300      	movs	r3, #0
}
 8000dfe:	4618      	mov	r0, r3
 8000e00:	370c      	adds	r7, #12
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
	...

08000e0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b089      	sub	sp, #36	; 0x24
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]
 8000e14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000e16:	2300      	movs	r3, #0
 8000e18:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8000e22:	2300      	movs	r3, #0
 8000e24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8000e26:	2300      	movs	r3, #0
 8000e28:	61fb      	str	r3, [r7, #28]
 8000e2a:	e175      	b.n	8001118 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	697a      	ldr	r2, [r7, #20]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e40:	693a      	ldr	r2, [r7, #16]
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	f040 8164 	bne.w	8001112 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	f003 0303 	and.w	r3, r3, #3
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	d005      	beq.n	8000e62 <HAL_GPIO_Init+0x56>
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	f003 0303 	and.w	r3, r3, #3
 8000e5e:	2b02      	cmp	r3, #2
 8000e60:	d130      	bne.n	8000ec4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	689b      	ldr	r3, [r3, #8]
 8000e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	2203      	movs	r2, #3
 8000e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e72:	43db      	mvns	r3, r3
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	4013      	ands	r3, r2
 8000e78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	68da      	ldr	r2, [r3, #12]
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	69ba      	ldr	r2, [r7, #24]
 8000e88:	4313      	orrs	r3, r2
 8000e8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e98:	2201      	movs	r2, #1
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	091b      	lsrs	r3, r3, #4
 8000eae:	f003 0201 	and.w	r2, r3, #1
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f003 0303 	and.w	r3, r3, #3
 8000ecc:	2b03      	cmp	r3, #3
 8000ece:	d017      	beq.n	8000f00 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	005b      	lsls	r3, r3, #1
 8000eda:	2203      	movs	r2, #3
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	69ba      	ldr	r2, [r7, #24]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	689a      	ldr	r2, [r3, #8]
 8000eec:	69fb      	ldr	r3, [r7, #28]
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	4313      	orrs	r3, r2
 8000ef8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	69ba      	ldr	r2, [r7, #24]
 8000efe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	f003 0303 	and.w	r3, r3, #3
 8000f08:	2b02      	cmp	r3, #2
 8000f0a:	d123      	bne.n	8000f54 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	08da      	lsrs	r2, r3, #3
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	3208      	adds	r2, #8
 8000f14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	f003 0307 	and.w	r3, r3, #7
 8000f20:	009b      	lsls	r3, r3, #2
 8000f22:	220f      	movs	r2, #15
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	43db      	mvns	r3, r3
 8000f2a:	69ba      	ldr	r2, [r7, #24]
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	691a      	ldr	r2, [r3, #16]
 8000f34:	69fb      	ldr	r3, [r7, #28]
 8000f36:	f003 0307 	and.w	r3, r3, #7
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	4313      	orrs	r3, r2
 8000f44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8000f46:	69fb      	ldr	r3, [r7, #28]
 8000f48:	08da      	lsrs	r2, r3, #3
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	3208      	adds	r2, #8
 8000f4e:	69b9      	ldr	r1, [r7, #24]
 8000f50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	2203      	movs	r2, #3
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	43db      	mvns	r3, r3
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f003 0203 	and.w	r2, r3, #3
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	69ba      	ldr	r2, [r7, #24]
 8000f7e:	4313      	orrs	r3, r2
 8000f80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	f000 80be 	beq.w	8001112 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f96:	4b66      	ldr	r3, [pc, #408]	; (8001130 <HAL_GPIO_Init+0x324>)
 8000f98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f9a:	4a65      	ldr	r2, [pc, #404]	; (8001130 <HAL_GPIO_Init+0x324>)
 8000f9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fa0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fa2:	4b63      	ldr	r3, [pc, #396]	; (8001130 <HAL_GPIO_Init+0x324>)
 8000fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8000fae:	4a61      	ldr	r2, [pc, #388]	; (8001134 <HAL_GPIO_Init+0x328>)
 8000fb0:	69fb      	ldr	r3, [r7, #28]
 8000fb2:	089b      	lsrs	r3, r3, #2
 8000fb4:	3302      	adds	r3, #2
 8000fb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fba:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000fbc:	69fb      	ldr	r3, [r7, #28]
 8000fbe:	f003 0303 	and.w	r3, r3, #3
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	220f      	movs	r2, #15
 8000fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fca:	43db      	mvns	r3, r3
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	4a58      	ldr	r2, [pc, #352]	; (8001138 <HAL_GPIO_Init+0x32c>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d037      	beq.n	800104a <HAL_GPIO_Init+0x23e>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4a57      	ldr	r2, [pc, #348]	; (800113c <HAL_GPIO_Init+0x330>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d031      	beq.n	8001046 <HAL_GPIO_Init+0x23a>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a56      	ldr	r2, [pc, #344]	; (8001140 <HAL_GPIO_Init+0x334>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d02b      	beq.n	8001042 <HAL_GPIO_Init+0x236>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a55      	ldr	r2, [pc, #340]	; (8001144 <HAL_GPIO_Init+0x338>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d025      	beq.n	800103e <HAL_GPIO_Init+0x232>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a54      	ldr	r2, [pc, #336]	; (8001148 <HAL_GPIO_Init+0x33c>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d01f      	beq.n	800103a <HAL_GPIO_Init+0x22e>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a53      	ldr	r2, [pc, #332]	; (800114c <HAL_GPIO_Init+0x340>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d019      	beq.n	8001036 <HAL_GPIO_Init+0x22a>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a52      	ldr	r2, [pc, #328]	; (8001150 <HAL_GPIO_Init+0x344>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d013      	beq.n	8001032 <HAL_GPIO_Init+0x226>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a51      	ldr	r2, [pc, #324]	; (8001154 <HAL_GPIO_Init+0x348>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d00d      	beq.n	800102e <HAL_GPIO_Init+0x222>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a50      	ldr	r2, [pc, #320]	; (8001158 <HAL_GPIO_Init+0x34c>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d007      	beq.n	800102a <HAL_GPIO_Init+0x21e>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a4f      	ldr	r2, [pc, #316]	; (800115c <HAL_GPIO_Init+0x350>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d101      	bne.n	8001026 <HAL_GPIO_Init+0x21a>
 8001022:	2309      	movs	r3, #9
 8001024:	e012      	b.n	800104c <HAL_GPIO_Init+0x240>
 8001026:	230a      	movs	r3, #10
 8001028:	e010      	b.n	800104c <HAL_GPIO_Init+0x240>
 800102a:	2308      	movs	r3, #8
 800102c:	e00e      	b.n	800104c <HAL_GPIO_Init+0x240>
 800102e:	2307      	movs	r3, #7
 8001030:	e00c      	b.n	800104c <HAL_GPIO_Init+0x240>
 8001032:	2306      	movs	r3, #6
 8001034:	e00a      	b.n	800104c <HAL_GPIO_Init+0x240>
 8001036:	2305      	movs	r3, #5
 8001038:	e008      	b.n	800104c <HAL_GPIO_Init+0x240>
 800103a:	2304      	movs	r3, #4
 800103c:	e006      	b.n	800104c <HAL_GPIO_Init+0x240>
 800103e:	2303      	movs	r3, #3
 8001040:	e004      	b.n	800104c <HAL_GPIO_Init+0x240>
 8001042:	2302      	movs	r3, #2
 8001044:	e002      	b.n	800104c <HAL_GPIO_Init+0x240>
 8001046:	2301      	movs	r3, #1
 8001048:	e000      	b.n	800104c <HAL_GPIO_Init+0x240>
 800104a:	2300      	movs	r3, #0
 800104c:	69fa      	ldr	r2, [r7, #28]
 800104e:	f002 0203 	and.w	r2, r2, #3
 8001052:	0092      	lsls	r2, r2, #2
 8001054:	4093      	lsls	r3, r2
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	4313      	orrs	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800105c:	4935      	ldr	r1, [pc, #212]	; (8001134 <HAL_GPIO_Init+0x328>)
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	089b      	lsrs	r3, r3, #2
 8001062:	3302      	adds	r3, #2
 8001064:	69ba      	ldr	r2, [r7, #24]
 8001066:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800106a:	4b3d      	ldr	r3, [pc, #244]	; (8001160 <HAL_GPIO_Init+0x354>)
 800106c:	689b      	ldr	r3, [r3, #8]
 800106e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	43db      	mvns	r3, r3
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	4013      	ands	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	685b      	ldr	r3, [r3, #4]
 800107e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001082:	2b00      	cmp	r3, #0
 8001084:	d003      	beq.n	800108e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	693b      	ldr	r3, [r7, #16]
 800108a:	4313      	orrs	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800108e:	4a34      	ldr	r2, [pc, #208]	; (8001160 <HAL_GPIO_Init+0x354>)
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001094:	4b32      	ldr	r3, [pc, #200]	; (8001160 <HAL_GPIO_Init+0x354>)
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800109a:	693b      	ldr	r3, [r7, #16]
 800109c:	43db      	mvns	r3, r3
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4013      	ands	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d003      	beq.n	80010b8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	693b      	ldr	r3, [r7, #16]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010b8:	4a29      	ldr	r2, [pc, #164]	; (8001160 <HAL_GPIO_Init+0x354>)
 80010ba:	69bb      	ldr	r3, [r7, #24]
 80010bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010be:	4b28      	ldr	r3, [pc, #160]	; (8001160 <HAL_GPIO_Init+0x354>)
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010c4:	693b      	ldr	r3, [r7, #16]
 80010c6:	43db      	mvns	r3, r3
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	4013      	ands	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d003      	beq.n	80010e2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	693b      	ldr	r3, [r7, #16]
 80010de:	4313      	orrs	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010e2:	4a1f      	ldr	r2, [pc, #124]	; (8001160 <HAL_GPIO_Init+0x354>)
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010e8:	4b1d      	ldr	r3, [pc, #116]	; (8001160 <HAL_GPIO_Init+0x354>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ee:	693b      	ldr	r3, [r7, #16]
 80010f0:	43db      	mvns	r3, r3
 80010f2:	69ba      	ldr	r2, [r7, #24]
 80010f4:	4013      	ands	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001100:	2b00      	cmp	r3, #0
 8001102:	d003      	beq.n	800110c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	4313      	orrs	r3, r2
 800110a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800110c:	4a14      	ldr	r2, [pc, #80]	; (8001160 <HAL_GPIO_Init+0x354>)
 800110e:	69bb      	ldr	r3, [r7, #24]
 8001110:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	3301      	adds	r3, #1
 8001116:	61fb      	str	r3, [r7, #28]
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	2b0f      	cmp	r3, #15
 800111c:	f67f ae86 	bls.w	8000e2c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001120:	bf00      	nop
 8001122:	bf00      	nop
 8001124:	3724      	adds	r7, #36	; 0x24
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	40023800 	.word	0x40023800
 8001134:	40013800 	.word	0x40013800
 8001138:	40020000 	.word	0x40020000
 800113c:	40020400 	.word	0x40020400
 8001140:	40020800 	.word	0x40020800
 8001144:	40020c00 	.word	0x40020c00
 8001148:	40021000 	.word	0x40021000
 800114c:	40021400 	.word	0x40021400
 8001150:	40021800 	.word	0x40021800
 8001154:	40021c00 	.word	0x40021c00
 8001158:	40022000 	.word	0x40022000
 800115c:	40022400 	.word	0x40022400
 8001160:	40013c00 	.word	0x40013c00

08001164 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800116c:	2300      	movs	r3, #0
 800116e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d101      	bne.n	800117a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001176:	2301      	movs	r3, #1
 8001178:	e29b      	b.n	80016b2 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 0301 	and.w	r3, r3, #1
 8001182:	2b00      	cmp	r3, #0
 8001184:	f000 8087 	beq.w	8001296 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001188:	4b96      	ldr	r3, [pc, #600]	; (80013e4 <HAL_RCC_OscConfig+0x280>)
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	f003 030c 	and.w	r3, r3, #12
 8001190:	2b04      	cmp	r3, #4
 8001192:	d00c      	beq.n	80011ae <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001194:	4b93      	ldr	r3, [pc, #588]	; (80013e4 <HAL_RCC_OscConfig+0x280>)
 8001196:	689b      	ldr	r3, [r3, #8]
 8001198:	f003 030c 	and.w	r3, r3, #12
 800119c:	2b08      	cmp	r3, #8
 800119e:	d112      	bne.n	80011c6 <HAL_RCC_OscConfig+0x62>
 80011a0:	4b90      	ldr	r3, [pc, #576]	; (80013e4 <HAL_RCC_OscConfig+0x280>)
 80011a2:	685b      	ldr	r3, [r3, #4]
 80011a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80011ac:	d10b      	bne.n	80011c6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011ae:	4b8d      	ldr	r3, [pc, #564]	; (80013e4 <HAL_RCC_OscConfig+0x280>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d06c      	beq.n	8001294 <HAL_RCC_OscConfig+0x130>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d168      	bne.n	8001294 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e275      	b.n	80016b2 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011ce:	d106      	bne.n	80011de <HAL_RCC_OscConfig+0x7a>
 80011d0:	4b84      	ldr	r3, [pc, #528]	; (80013e4 <HAL_RCC_OscConfig+0x280>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	4a83      	ldr	r2, [pc, #524]	; (80013e4 <HAL_RCC_OscConfig+0x280>)
 80011d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80011da:	6013      	str	r3, [r2, #0]
 80011dc:	e02e      	b.n	800123c <HAL_RCC_OscConfig+0xd8>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d10c      	bne.n	8001200 <HAL_RCC_OscConfig+0x9c>
 80011e6:	4b7f      	ldr	r3, [pc, #508]	; (80013e4 <HAL_RCC_OscConfig+0x280>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a7e      	ldr	r2, [pc, #504]	; (80013e4 <HAL_RCC_OscConfig+0x280>)
 80011ec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011f0:	6013      	str	r3, [r2, #0]
 80011f2:	4b7c      	ldr	r3, [pc, #496]	; (80013e4 <HAL_RCC_OscConfig+0x280>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4a7b      	ldr	r2, [pc, #492]	; (80013e4 <HAL_RCC_OscConfig+0x280>)
 80011f8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80011fc:	6013      	str	r3, [r2, #0]
 80011fe:	e01d      	b.n	800123c <HAL_RCC_OscConfig+0xd8>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	685b      	ldr	r3, [r3, #4]
 8001204:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001208:	d10c      	bne.n	8001224 <HAL_RCC_OscConfig+0xc0>
 800120a:	4b76      	ldr	r3, [pc, #472]	; (80013e4 <HAL_RCC_OscConfig+0x280>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a75      	ldr	r2, [pc, #468]	; (80013e4 <HAL_RCC_OscConfig+0x280>)
 8001210:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001214:	6013      	str	r3, [r2, #0]
 8001216:	4b73      	ldr	r3, [pc, #460]	; (80013e4 <HAL_RCC_OscConfig+0x280>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	4a72      	ldr	r2, [pc, #456]	; (80013e4 <HAL_RCC_OscConfig+0x280>)
 800121c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001220:	6013      	str	r3, [r2, #0]
 8001222:	e00b      	b.n	800123c <HAL_RCC_OscConfig+0xd8>
 8001224:	4b6f      	ldr	r3, [pc, #444]	; (80013e4 <HAL_RCC_OscConfig+0x280>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4a6e      	ldr	r2, [pc, #440]	; (80013e4 <HAL_RCC_OscConfig+0x280>)
 800122a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800122e:	6013      	str	r3, [r2, #0]
 8001230:	4b6c      	ldr	r3, [pc, #432]	; (80013e4 <HAL_RCC_OscConfig+0x280>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a6b      	ldr	r2, [pc, #428]	; (80013e4 <HAL_RCC_OscConfig+0x280>)
 8001236:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800123a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	685b      	ldr	r3, [r3, #4]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d013      	beq.n	800126c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001244:	f7ff fc32 	bl	8000aac <HAL_GetTick>
 8001248:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800124a:	e008      	b.n	800125e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800124c:	f7ff fc2e 	bl	8000aac <HAL_GetTick>
 8001250:	4602      	mov	r2, r0
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	2b64      	cmp	r3, #100	; 0x64
 8001258:	d901      	bls.n	800125e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800125a:	2303      	movs	r3, #3
 800125c:	e229      	b.n	80016b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800125e:	4b61      	ldr	r3, [pc, #388]	; (80013e4 <HAL_RCC_OscConfig+0x280>)
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001266:	2b00      	cmp	r3, #0
 8001268:	d0f0      	beq.n	800124c <HAL_RCC_OscConfig+0xe8>
 800126a:	e014      	b.n	8001296 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800126c:	f7ff fc1e 	bl	8000aac <HAL_GetTick>
 8001270:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001272:	e008      	b.n	8001286 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001274:	f7ff fc1a 	bl	8000aac <HAL_GetTick>
 8001278:	4602      	mov	r2, r0
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	2b64      	cmp	r3, #100	; 0x64
 8001280:	d901      	bls.n	8001286 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001282:	2303      	movs	r3, #3
 8001284:	e215      	b.n	80016b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001286:	4b57      	ldr	r3, [pc, #348]	; (80013e4 <HAL_RCC_OscConfig+0x280>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d1f0      	bne.n	8001274 <HAL_RCC_OscConfig+0x110>
 8001292:	e000      	b.n	8001296 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001294:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f003 0302 	and.w	r3, r3, #2
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d069      	beq.n	8001376 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80012a2:	4b50      	ldr	r3, [pc, #320]	; (80013e4 <HAL_RCC_OscConfig+0x280>)
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	f003 030c 	and.w	r3, r3, #12
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d00b      	beq.n	80012c6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80012ae:	4b4d      	ldr	r3, [pc, #308]	; (80013e4 <HAL_RCC_OscConfig+0x280>)
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	f003 030c 	and.w	r3, r3, #12
 80012b6:	2b08      	cmp	r3, #8
 80012b8:	d11c      	bne.n	80012f4 <HAL_RCC_OscConfig+0x190>
 80012ba:	4b4a      	ldr	r3, [pc, #296]	; (80013e4 <HAL_RCC_OscConfig+0x280>)
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d116      	bne.n	80012f4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012c6:	4b47      	ldr	r3, [pc, #284]	; (80013e4 <HAL_RCC_OscConfig+0x280>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d005      	beq.n	80012de <HAL_RCC_OscConfig+0x17a>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	68db      	ldr	r3, [r3, #12]
 80012d6:	2b01      	cmp	r3, #1
 80012d8:	d001      	beq.n	80012de <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e1e9      	b.n	80016b2 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012de:	4b41      	ldr	r3, [pc, #260]	; (80013e4 <HAL_RCC_OscConfig+0x280>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	691b      	ldr	r3, [r3, #16]
 80012ea:	00db      	lsls	r3, r3, #3
 80012ec:	493d      	ldr	r1, [pc, #244]	; (80013e4 <HAL_RCC_OscConfig+0x280>)
 80012ee:	4313      	orrs	r3, r2
 80012f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012f2:	e040      	b.n	8001376 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d023      	beq.n	8001344 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012fc:	4b39      	ldr	r3, [pc, #228]	; (80013e4 <HAL_RCC_OscConfig+0x280>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	4a38      	ldr	r2, [pc, #224]	; (80013e4 <HAL_RCC_OscConfig+0x280>)
 8001302:	f043 0301 	orr.w	r3, r3, #1
 8001306:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001308:	f7ff fbd0 	bl	8000aac <HAL_GetTick>
 800130c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800130e:	e008      	b.n	8001322 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001310:	f7ff fbcc 	bl	8000aac <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	1ad3      	subs	r3, r2, r3
 800131a:	2b02      	cmp	r3, #2
 800131c:	d901      	bls.n	8001322 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800131e:	2303      	movs	r3, #3
 8001320:	e1c7      	b.n	80016b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001322:	4b30      	ldr	r3, [pc, #192]	; (80013e4 <HAL_RCC_OscConfig+0x280>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	f003 0302 	and.w	r3, r3, #2
 800132a:	2b00      	cmp	r3, #0
 800132c:	d0f0      	beq.n	8001310 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800132e:	4b2d      	ldr	r3, [pc, #180]	; (80013e4 <HAL_RCC_OscConfig+0x280>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	691b      	ldr	r3, [r3, #16]
 800133a:	00db      	lsls	r3, r3, #3
 800133c:	4929      	ldr	r1, [pc, #164]	; (80013e4 <HAL_RCC_OscConfig+0x280>)
 800133e:	4313      	orrs	r3, r2
 8001340:	600b      	str	r3, [r1, #0]
 8001342:	e018      	b.n	8001376 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001344:	4b27      	ldr	r3, [pc, #156]	; (80013e4 <HAL_RCC_OscConfig+0x280>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a26      	ldr	r2, [pc, #152]	; (80013e4 <HAL_RCC_OscConfig+0x280>)
 800134a:	f023 0301 	bic.w	r3, r3, #1
 800134e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001350:	f7ff fbac 	bl	8000aac <HAL_GetTick>
 8001354:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001356:	e008      	b.n	800136a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001358:	f7ff fba8 	bl	8000aac <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b02      	cmp	r3, #2
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e1a3      	b.n	80016b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800136a:	4b1e      	ldr	r3, [pc, #120]	; (80013e4 <HAL_RCC_OscConfig+0x280>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0302 	and.w	r3, r3, #2
 8001372:	2b00      	cmp	r3, #0
 8001374:	d1f0      	bne.n	8001358 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f003 0308 	and.w	r3, r3, #8
 800137e:	2b00      	cmp	r3, #0
 8001380:	d038      	beq.n	80013f4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	695b      	ldr	r3, [r3, #20]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d019      	beq.n	80013be <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800138a:	4b16      	ldr	r3, [pc, #88]	; (80013e4 <HAL_RCC_OscConfig+0x280>)
 800138c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800138e:	4a15      	ldr	r2, [pc, #84]	; (80013e4 <HAL_RCC_OscConfig+0x280>)
 8001390:	f043 0301 	orr.w	r3, r3, #1
 8001394:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001396:	f7ff fb89 	bl	8000aac <HAL_GetTick>
 800139a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800139c:	e008      	b.n	80013b0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800139e:	f7ff fb85 	bl	8000aac <HAL_GetTick>
 80013a2:	4602      	mov	r2, r0
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d901      	bls.n	80013b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80013ac:	2303      	movs	r3, #3
 80013ae:	e180      	b.n	80016b2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013b0:	4b0c      	ldr	r3, [pc, #48]	; (80013e4 <HAL_RCC_OscConfig+0x280>)
 80013b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013b4:	f003 0302 	and.w	r3, r3, #2
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d0f0      	beq.n	800139e <HAL_RCC_OscConfig+0x23a>
 80013bc:	e01a      	b.n	80013f4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80013be:	4b09      	ldr	r3, [pc, #36]	; (80013e4 <HAL_RCC_OscConfig+0x280>)
 80013c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013c2:	4a08      	ldr	r2, [pc, #32]	; (80013e4 <HAL_RCC_OscConfig+0x280>)
 80013c4:	f023 0301 	bic.w	r3, r3, #1
 80013c8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013ca:	f7ff fb6f 	bl	8000aac <HAL_GetTick>
 80013ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013d0:	e00a      	b.n	80013e8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013d2:	f7ff fb6b 	bl	8000aac <HAL_GetTick>
 80013d6:	4602      	mov	r2, r0
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	1ad3      	subs	r3, r2, r3
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d903      	bls.n	80013e8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80013e0:	2303      	movs	r3, #3
 80013e2:	e166      	b.n	80016b2 <HAL_RCC_OscConfig+0x54e>
 80013e4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013e8:	4b92      	ldr	r3, [pc, #584]	; (8001634 <HAL_RCC_OscConfig+0x4d0>)
 80013ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80013ec:	f003 0302 	and.w	r3, r3, #2
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d1ee      	bne.n	80013d2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	f003 0304 	and.w	r3, r3, #4
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	f000 80a4 	beq.w	800154a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001402:	4b8c      	ldr	r3, [pc, #560]	; (8001634 <HAL_RCC_OscConfig+0x4d0>)
 8001404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800140a:	2b00      	cmp	r3, #0
 800140c:	d10d      	bne.n	800142a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800140e:	4b89      	ldr	r3, [pc, #548]	; (8001634 <HAL_RCC_OscConfig+0x4d0>)
 8001410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001412:	4a88      	ldr	r2, [pc, #544]	; (8001634 <HAL_RCC_OscConfig+0x4d0>)
 8001414:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001418:	6413      	str	r3, [r2, #64]	; 0x40
 800141a:	4b86      	ldr	r3, [pc, #536]	; (8001634 <HAL_RCC_OscConfig+0x4d0>)
 800141c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001422:	60bb      	str	r3, [r7, #8]
 8001424:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001426:	2301      	movs	r3, #1
 8001428:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800142a:	4b83      	ldr	r3, [pc, #524]	; (8001638 <HAL_RCC_OscConfig+0x4d4>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001432:	2b00      	cmp	r3, #0
 8001434:	d118      	bne.n	8001468 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001436:	4b80      	ldr	r3, [pc, #512]	; (8001638 <HAL_RCC_OscConfig+0x4d4>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a7f      	ldr	r2, [pc, #508]	; (8001638 <HAL_RCC_OscConfig+0x4d4>)
 800143c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001440:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001442:	f7ff fb33 	bl	8000aac <HAL_GetTick>
 8001446:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001448:	e008      	b.n	800145c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800144a:	f7ff fb2f 	bl	8000aac <HAL_GetTick>
 800144e:	4602      	mov	r2, r0
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	2b64      	cmp	r3, #100	; 0x64
 8001456:	d901      	bls.n	800145c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001458:	2303      	movs	r3, #3
 800145a:	e12a      	b.n	80016b2 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800145c:	4b76      	ldr	r3, [pc, #472]	; (8001638 <HAL_RCC_OscConfig+0x4d4>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001464:	2b00      	cmp	r3, #0
 8001466:	d0f0      	beq.n	800144a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	2b01      	cmp	r3, #1
 800146e:	d106      	bne.n	800147e <HAL_RCC_OscConfig+0x31a>
 8001470:	4b70      	ldr	r3, [pc, #448]	; (8001634 <HAL_RCC_OscConfig+0x4d0>)
 8001472:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001474:	4a6f      	ldr	r2, [pc, #444]	; (8001634 <HAL_RCC_OscConfig+0x4d0>)
 8001476:	f043 0301 	orr.w	r3, r3, #1
 800147a:	6713      	str	r3, [r2, #112]	; 0x70
 800147c:	e02d      	b.n	80014da <HAL_RCC_OscConfig+0x376>
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	689b      	ldr	r3, [r3, #8]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d10c      	bne.n	80014a0 <HAL_RCC_OscConfig+0x33c>
 8001486:	4b6b      	ldr	r3, [pc, #428]	; (8001634 <HAL_RCC_OscConfig+0x4d0>)
 8001488:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800148a:	4a6a      	ldr	r2, [pc, #424]	; (8001634 <HAL_RCC_OscConfig+0x4d0>)
 800148c:	f023 0301 	bic.w	r3, r3, #1
 8001490:	6713      	str	r3, [r2, #112]	; 0x70
 8001492:	4b68      	ldr	r3, [pc, #416]	; (8001634 <HAL_RCC_OscConfig+0x4d0>)
 8001494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001496:	4a67      	ldr	r2, [pc, #412]	; (8001634 <HAL_RCC_OscConfig+0x4d0>)
 8001498:	f023 0304 	bic.w	r3, r3, #4
 800149c:	6713      	str	r3, [r2, #112]	; 0x70
 800149e:	e01c      	b.n	80014da <HAL_RCC_OscConfig+0x376>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	2b05      	cmp	r3, #5
 80014a6:	d10c      	bne.n	80014c2 <HAL_RCC_OscConfig+0x35e>
 80014a8:	4b62      	ldr	r3, [pc, #392]	; (8001634 <HAL_RCC_OscConfig+0x4d0>)
 80014aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014ac:	4a61      	ldr	r2, [pc, #388]	; (8001634 <HAL_RCC_OscConfig+0x4d0>)
 80014ae:	f043 0304 	orr.w	r3, r3, #4
 80014b2:	6713      	str	r3, [r2, #112]	; 0x70
 80014b4:	4b5f      	ldr	r3, [pc, #380]	; (8001634 <HAL_RCC_OscConfig+0x4d0>)
 80014b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014b8:	4a5e      	ldr	r2, [pc, #376]	; (8001634 <HAL_RCC_OscConfig+0x4d0>)
 80014ba:	f043 0301 	orr.w	r3, r3, #1
 80014be:	6713      	str	r3, [r2, #112]	; 0x70
 80014c0:	e00b      	b.n	80014da <HAL_RCC_OscConfig+0x376>
 80014c2:	4b5c      	ldr	r3, [pc, #368]	; (8001634 <HAL_RCC_OscConfig+0x4d0>)
 80014c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014c6:	4a5b      	ldr	r2, [pc, #364]	; (8001634 <HAL_RCC_OscConfig+0x4d0>)
 80014c8:	f023 0301 	bic.w	r3, r3, #1
 80014cc:	6713      	str	r3, [r2, #112]	; 0x70
 80014ce:	4b59      	ldr	r3, [pc, #356]	; (8001634 <HAL_RCC_OscConfig+0x4d0>)
 80014d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014d2:	4a58      	ldr	r2, [pc, #352]	; (8001634 <HAL_RCC_OscConfig+0x4d0>)
 80014d4:	f023 0304 	bic.w	r3, r3, #4
 80014d8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d015      	beq.n	800150e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014e2:	f7ff fae3 	bl	8000aac <HAL_GetTick>
 80014e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014e8:	e00a      	b.n	8001500 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014ea:	f7ff fadf 	bl	8000aac <HAL_GetTick>
 80014ee:	4602      	mov	r2, r0
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d901      	bls.n	8001500 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80014fc:	2303      	movs	r3, #3
 80014fe:	e0d8      	b.n	80016b2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001500:	4b4c      	ldr	r3, [pc, #304]	; (8001634 <HAL_RCC_OscConfig+0x4d0>)
 8001502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001504:	f003 0302 	and.w	r3, r3, #2
 8001508:	2b00      	cmp	r3, #0
 800150a:	d0ee      	beq.n	80014ea <HAL_RCC_OscConfig+0x386>
 800150c:	e014      	b.n	8001538 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800150e:	f7ff facd 	bl	8000aac <HAL_GetTick>
 8001512:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001514:	e00a      	b.n	800152c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001516:	f7ff fac9 	bl	8000aac <HAL_GetTick>
 800151a:	4602      	mov	r2, r0
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	1ad3      	subs	r3, r2, r3
 8001520:	f241 3288 	movw	r2, #5000	; 0x1388
 8001524:	4293      	cmp	r3, r2
 8001526:	d901      	bls.n	800152c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e0c2      	b.n	80016b2 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800152c:	4b41      	ldr	r3, [pc, #260]	; (8001634 <HAL_RCC_OscConfig+0x4d0>)
 800152e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001530:	f003 0302 	and.w	r3, r3, #2
 8001534:	2b00      	cmp	r3, #0
 8001536:	d1ee      	bne.n	8001516 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001538:	7dfb      	ldrb	r3, [r7, #23]
 800153a:	2b01      	cmp	r3, #1
 800153c:	d105      	bne.n	800154a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800153e:	4b3d      	ldr	r3, [pc, #244]	; (8001634 <HAL_RCC_OscConfig+0x4d0>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001542:	4a3c      	ldr	r2, [pc, #240]	; (8001634 <HAL_RCC_OscConfig+0x4d0>)
 8001544:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001548:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	699b      	ldr	r3, [r3, #24]
 800154e:	2b00      	cmp	r3, #0
 8001550:	f000 80ae 	beq.w	80016b0 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001554:	4b37      	ldr	r3, [pc, #220]	; (8001634 <HAL_RCC_OscConfig+0x4d0>)
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	f003 030c 	and.w	r3, r3, #12
 800155c:	2b08      	cmp	r3, #8
 800155e:	d06d      	beq.n	800163c <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	2b02      	cmp	r3, #2
 8001566:	d14b      	bne.n	8001600 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001568:	4b32      	ldr	r3, [pc, #200]	; (8001634 <HAL_RCC_OscConfig+0x4d0>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4a31      	ldr	r2, [pc, #196]	; (8001634 <HAL_RCC_OscConfig+0x4d0>)
 800156e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001572:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001574:	f7ff fa9a 	bl	8000aac <HAL_GetTick>
 8001578:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800157a:	e008      	b.n	800158e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800157c:	f7ff fa96 	bl	8000aac <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	2b02      	cmp	r3, #2
 8001588:	d901      	bls.n	800158e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e091      	b.n	80016b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800158e:	4b29      	ldr	r3, [pc, #164]	; (8001634 <HAL_RCC_OscConfig+0x4d0>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d1f0      	bne.n	800157c <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	69da      	ldr	r2, [r3, #28]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6a1b      	ldr	r3, [r3, #32]
 80015a2:	431a      	orrs	r2, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a8:	019b      	lsls	r3, r3, #6
 80015aa:	431a      	orrs	r2, r3
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015b0:	085b      	lsrs	r3, r3, #1
 80015b2:	3b01      	subs	r3, #1
 80015b4:	041b      	lsls	r3, r3, #16
 80015b6:	431a      	orrs	r2, r3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015bc:	061b      	lsls	r3, r3, #24
 80015be:	431a      	orrs	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c4:	071b      	lsls	r3, r3, #28
 80015c6:	491b      	ldr	r1, [pc, #108]	; (8001634 <HAL_RCC_OscConfig+0x4d0>)
 80015c8:	4313      	orrs	r3, r2
 80015ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80015cc:	4b19      	ldr	r3, [pc, #100]	; (8001634 <HAL_RCC_OscConfig+0x4d0>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a18      	ldr	r2, [pc, #96]	; (8001634 <HAL_RCC_OscConfig+0x4d0>)
 80015d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015d8:	f7ff fa68 	bl	8000aac <HAL_GetTick>
 80015dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015de:	e008      	b.n	80015f2 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015e0:	f7ff fa64 	bl	8000aac <HAL_GetTick>
 80015e4:	4602      	mov	r2, r0
 80015e6:	693b      	ldr	r3, [r7, #16]
 80015e8:	1ad3      	subs	r3, r2, r3
 80015ea:	2b02      	cmp	r3, #2
 80015ec:	d901      	bls.n	80015f2 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80015ee:	2303      	movs	r3, #3
 80015f0:	e05f      	b.n	80016b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015f2:	4b10      	ldr	r3, [pc, #64]	; (8001634 <HAL_RCC_OscConfig+0x4d0>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d0f0      	beq.n	80015e0 <HAL_RCC_OscConfig+0x47c>
 80015fe:	e057      	b.n	80016b0 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001600:	4b0c      	ldr	r3, [pc, #48]	; (8001634 <HAL_RCC_OscConfig+0x4d0>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a0b      	ldr	r2, [pc, #44]	; (8001634 <HAL_RCC_OscConfig+0x4d0>)
 8001606:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800160a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800160c:	f7ff fa4e 	bl	8000aac <HAL_GetTick>
 8001610:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001612:	e008      	b.n	8001626 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001614:	f7ff fa4a 	bl	8000aac <HAL_GetTick>
 8001618:	4602      	mov	r2, r0
 800161a:	693b      	ldr	r3, [r7, #16]
 800161c:	1ad3      	subs	r3, r2, r3
 800161e:	2b02      	cmp	r3, #2
 8001620:	d901      	bls.n	8001626 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001622:	2303      	movs	r3, #3
 8001624:	e045      	b.n	80016b2 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001626:	4b03      	ldr	r3, [pc, #12]	; (8001634 <HAL_RCC_OscConfig+0x4d0>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d1f0      	bne.n	8001614 <HAL_RCC_OscConfig+0x4b0>
 8001632:	e03d      	b.n	80016b0 <HAL_RCC_OscConfig+0x54c>
 8001634:	40023800 	.word	0x40023800
 8001638:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800163c:	4b1f      	ldr	r3, [pc, #124]	; (80016bc <HAL_RCC_OscConfig+0x558>)
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	699b      	ldr	r3, [r3, #24]
 8001646:	2b01      	cmp	r3, #1
 8001648:	d030      	beq.n	80016ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001654:	429a      	cmp	r2, r3
 8001656:	d129      	bne.n	80016ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001662:	429a      	cmp	r2, r3
 8001664:	d122      	bne.n	80016ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001666:	68fa      	ldr	r2, [r7, #12]
 8001668:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800166c:	4013      	ands	r3, r2
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001672:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001674:	4293      	cmp	r3, r2
 8001676:	d119      	bne.n	80016ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001682:	085b      	lsrs	r3, r3, #1
 8001684:	3b01      	subs	r3, #1
 8001686:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001688:	429a      	cmp	r2, r3
 800168a:	d10f      	bne.n	80016ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001696:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001698:	429a      	cmp	r2, r3
 800169a:	d107      	bne.n	80016ac <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016a6:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80016a8:	429a      	cmp	r2, r3
 80016aa:	d001      	beq.n	80016b0 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80016ac:	2301      	movs	r3, #1
 80016ae:	e000      	b.n	80016b2 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80016b0:	2300      	movs	r3, #0
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3718      	adds	r7, #24
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	40023800 	.word	0x40023800

080016c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80016ca:	2300      	movs	r3, #0
 80016cc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d101      	bne.n	80016d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80016d4:	2301      	movs	r3, #1
 80016d6:	e0d0      	b.n	800187a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016d8:	4b6a      	ldr	r3, [pc, #424]	; (8001884 <HAL_RCC_ClockConfig+0x1c4>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f003 030f 	and.w	r3, r3, #15
 80016e0:	683a      	ldr	r2, [r7, #0]
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d910      	bls.n	8001708 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016e6:	4b67      	ldr	r3, [pc, #412]	; (8001884 <HAL_RCC_ClockConfig+0x1c4>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f023 020f 	bic.w	r2, r3, #15
 80016ee:	4965      	ldr	r1, [pc, #404]	; (8001884 <HAL_RCC_ClockConfig+0x1c4>)
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016f6:	4b63      	ldr	r3, [pc, #396]	; (8001884 <HAL_RCC_ClockConfig+0x1c4>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 030f 	and.w	r3, r3, #15
 80016fe:	683a      	ldr	r2, [r7, #0]
 8001700:	429a      	cmp	r2, r3
 8001702:	d001      	beq.n	8001708 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e0b8      	b.n	800187a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0302 	and.w	r3, r3, #2
 8001710:	2b00      	cmp	r3, #0
 8001712:	d020      	beq.n	8001756 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f003 0304 	and.w	r3, r3, #4
 800171c:	2b00      	cmp	r3, #0
 800171e:	d005      	beq.n	800172c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001720:	4b59      	ldr	r3, [pc, #356]	; (8001888 <HAL_RCC_ClockConfig+0x1c8>)
 8001722:	689b      	ldr	r3, [r3, #8]
 8001724:	4a58      	ldr	r2, [pc, #352]	; (8001888 <HAL_RCC_ClockConfig+0x1c8>)
 8001726:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800172a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f003 0308 	and.w	r3, r3, #8
 8001734:	2b00      	cmp	r3, #0
 8001736:	d005      	beq.n	8001744 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001738:	4b53      	ldr	r3, [pc, #332]	; (8001888 <HAL_RCC_ClockConfig+0x1c8>)
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	4a52      	ldr	r2, [pc, #328]	; (8001888 <HAL_RCC_ClockConfig+0x1c8>)
 800173e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001742:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001744:	4b50      	ldr	r3, [pc, #320]	; (8001888 <HAL_RCC_ClockConfig+0x1c8>)
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	494d      	ldr	r1, [pc, #308]	; (8001888 <HAL_RCC_ClockConfig+0x1c8>)
 8001752:	4313      	orrs	r3, r2
 8001754:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 0301 	and.w	r3, r3, #1
 800175e:	2b00      	cmp	r3, #0
 8001760:	d040      	beq.n	80017e4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	685b      	ldr	r3, [r3, #4]
 8001766:	2b01      	cmp	r3, #1
 8001768:	d107      	bne.n	800177a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800176a:	4b47      	ldr	r3, [pc, #284]	; (8001888 <HAL_RCC_ClockConfig+0x1c8>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d115      	bne.n	80017a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e07f      	b.n	800187a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	2b02      	cmp	r3, #2
 8001780:	d107      	bne.n	8001792 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001782:	4b41      	ldr	r3, [pc, #260]	; (8001888 <HAL_RCC_ClockConfig+0x1c8>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800178a:	2b00      	cmp	r3, #0
 800178c:	d109      	bne.n	80017a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e073      	b.n	800187a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001792:	4b3d      	ldr	r3, [pc, #244]	; (8001888 <HAL_RCC_ClockConfig+0x1c8>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	2b00      	cmp	r3, #0
 800179c:	d101      	bne.n	80017a2 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e06b      	b.n	800187a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017a2:	4b39      	ldr	r3, [pc, #228]	; (8001888 <HAL_RCC_ClockConfig+0x1c8>)
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	f023 0203 	bic.w	r2, r3, #3
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	4936      	ldr	r1, [pc, #216]	; (8001888 <HAL_RCC_ClockConfig+0x1c8>)
 80017b0:	4313      	orrs	r3, r2
 80017b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80017b4:	f7ff f97a 	bl	8000aac <HAL_GetTick>
 80017b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ba:	e00a      	b.n	80017d2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017bc:	f7ff f976 	bl	8000aac <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e053      	b.n	800187a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017d2:	4b2d      	ldr	r3, [pc, #180]	; (8001888 <HAL_RCC_ClockConfig+0x1c8>)
 80017d4:	689b      	ldr	r3, [r3, #8]
 80017d6:	f003 020c 	and.w	r2, r3, #12
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	009b      	lsls	r3, r3, #2
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d1eb      	bne.n	80017bc <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80017e4:	4b27      	ldr	r3, [pc, #156]	; (8001884 <HAL_RCC_ClockConfig+0x1c4>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 030f 	and.w	r3, r3, #15
 80017ec:	683a      	ldr	r2, [r7, #0]
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d210      	bcs.n	8001814 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017f2:	4b24      	ldr	r3, [pc, #144]	; (8001884 <HAL_RCC_ClockConfig+0x1c4>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f023 020f 	bic.w	r2, r3, #15
 80017fa:	4922      	ldr	r1, [pc, #136]	; (8001884 <HAL_RCC_ClockConfig+0x1c4>)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	4313      	orrs	r3, r2
 8001800:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001802:	4b20      	ldr	r3, [pc, #128]	; (8001884 <HAL_RCC_ClockConfig+0x1c4>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 030f 	and.w	r3, r3, #15
 800180a:	683a      	ldr	r2, [r7, #0]
 800180c:	429a      	cmp	r2, r3
 800180e:	d001      	beq.n	8001814 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e032      	b.n	800187a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0304 	and.w	r3, r3, #4
 800181c:	2b00      	cmp	r3, #0
 800181e:	d008      	beq.n	8001832 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001820:	4b19      	ldr	r3, [pc, #100]	; (8001888 <HAL_RCC_ClockConfig+0x1c8>)
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	4916      	ldr	r1, [pc, #88]	; (8001888 <HAL_RCC_ClockConfig+0x1c8>)
 800182e:	4313      	orrs	r3, r2
 8001830:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0308 	and.w	r3, r3, #8
 800183a:	2b00      	cmp	r3, #0
 800183c:	d009      	beq.n	8001852 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800183e:	4b12      	ldr	r3, [pc, #72]	; (8001888 <HAL_RCC_ClockConfig+0x1c8>)
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	691b      	ldr	r3, [r3, #16]
 800184a:	00db      	lsls	r3, r3, #3
 800184c:	490e      	ldr	r1, [pc, #56]	; (8001888 <HAL_RCC_ClockConfig+0x1c8>)
 800184e:	4313      	orrs	r3, r2
 8001850:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001852:	f000 f821 	bl	8001898 <HAL_RCC_GetSysClockFreq>
 8001856:	4602      	mov	r2, r0
 8001858:	4b0b      	ldr	r3, [pc, #44]	; (8001888 <HAL_RCC_ClockConfig+0x1c8>)
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	091b      	lsrs	r3, r3, #4
 800185e:	f003 030f 	and.w	r3, r3, #15
 8001862:	490a      	ldr	r1, [pc, #40]	; (800188c <HAL_RCC_ClockConfig+0x1cc>)
 8001864:	5ccb      	ldrb	r3, [r1, r3]
 8001866:	fa22 f303 	lsr.w	r3, r2, r3
 800186a:	4a09      	ldr	r2, [pc, #36]	; (8001890 <HAL_RCC_ClockConfig+0x1d0>)
 800186c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800186e:	4b09      	ldr	r3, [pc, #36]	; (8001894 <HAL_RCC_ClockConfig+0x1d4>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff f8d6 	bl	8000a24 <HAL_InitTick>

  return HAL_OK;
 8001878:	2300      	movs	r3, #0
}
 800187a:	4618      	mov	r0, r3
 800187c:	3710      	adds	r7, #16
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40023c00 	.word	0x40023c00
 8001888:	40023800 	.word	0x40023800
 800188c:	08003a90 	.word	0x08003a90
 8001890:	20000000 	.word	0x20000000
 8001894:	20000004 	.word	0x20000004

08001898 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001898:	b5b0      	push	{r4, r5, r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800189e:	2100      	movs	r1, #0
 80018a0:	6079      	str	r1, [r7, #4]
 80018a2:	2100      	movs	r1, #0
 80018a4:	60f9      	str	r1, [r7, #12]
 80018a6:	2100      	movs	r1, #0
 80018a8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 80018aa:	2100      	movs	r1, #0
 80018ac:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80018ae:	4952      	ldr	r1, [pc, #328]	; (80019f8 <HAL_RCC_GetSysClockFreq+0x160>)
 80018b0:	6889      	ldr	r1, [r1, #8]
 80018b2:	f001 010c 	and.w	r1, r1, #12
 80018b6:	2908      	cmp	r1, #8
 80018b8:	d00d      	beq.n	80018d6 <HAL_RCC_GetSysClockFreq+0x3e>
 80018ba:	2908      	cmp	r1, #8
 80018bc:	f200 8094 	bhi.w	80019e8 <HAL_RCC_GetSysClockFreq+0x150>
 80018c0:	2900      	cmp	r1, #0
 80018c2:	d002      	beq.n	80018ca <HAL_RCC_GetSysClockFreq+0x32>
 80018c4:	2904      	cmp	r1, #4
 80018c6:	d003      	beq.n	80018d0 <HAL_RCC_GetSysClockFreq+0x38>
 80018c8:	e08e      	b.n	80019e8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80018ca:	4b4c      	ldr	r3, [pc, #304]	; (80019fc <HAL_RCC_GetSysClockFreq+0x164>)
 80018cc:	60bb      	str	r3, [r7, #8]
      break;
 80018ce:	e08e      	b.n	80019ee <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80018d0:	4b4b      	ldr	r3, [pc, #300]	; (8001a00 <HAL_RCC_GetSysClockFreq+0x168>)
 80018d2:	60bb      	str	r3, [r7, #8]
      break;
 80018d4:	e08b      	b.n	80019ee <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80018d6:	4948      	ldr	r1, [pc, #288]	; (80019f8 <HAL_RCC_GetSysClockFreq+0x160>)
 80018d8:	6849      	ldr	r1, [r1, #4]
 80018da:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80018de:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80018e0:	4945      	ldr	r1, [pc, #276]	; (80019f8 <HAL_RCC_GetSysClockFreq+0x160>)
 80018e2:	6849      	ldr	r1, [r1, #4]
 80018e4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80018e8:	2900      	cmp	r1, #0
 80018ea:	d024      	beq.n	8001936 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018ec:	4942      	ldr	r1, [pc, #264]	; (80019f8 <HAL_RCC_GetSysClockFreq+0x160>)
 80018ee:	6849      	ldr	r1, [r1, #4]
 80018f0:	0989      	lsrs	r1, r1, #6
 80018f2:	4608      	mov	r0, r1
 80018f4:	f04f 0100 	mov.w	r1, #0
 80018f8:	f240 14ff 	movw	r4, #511	; 0x1ff
 80018fc:	f04f 0500 	mov.w	r5, #0
 8001900:	ea00 0204 	and.w	r2, r0, r4
 8001904:	ea01 0305 	and.w	r3, r1, r5
 8001908:	493d      	ldr	r1, [pc, #244]	; (8001a00 <HAL_RCC_GetSysClockFreq+0x168>)
 800190a:	fb01 f003 	mul.w	r0, r1, r3
 800190e:	2100      	movs	r1, #0
 8001910:	fb01 f102 	mul.w	r1, r1, r2
 8001914:	1844      	adds	r4, r0, r1
 8001916:	493a      	ldr	r1, [pc, #232]	; (8001a00 <HAL_RCC_GetSysClockFreq+0x168>)
 8001918:	fba2 0101 	umull	r0, r1, r2, r1
 800191c:	1863      	adds	r3, r4, r1
 800191e:	4619      	mov	r1, r3
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	461a      	mov	r2, r3
 8001924:	f04f 0300 	mov.w	r3, #0
 8001928:	f7fe fc8e 	bl	8000248 <__aeabi_uldivmod>
 800192c:	4602      	mov	r2, r0
 800192e:	460b      	mov	r3, r1
 8001930:	4613      	mov	r3, r2
 8001932:	60fb      	str	r3, [r7, #12]
 8001934:	e04a      	b.n	80019cc <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001936:	4b30      	ldr	r3, [pc, #192]	; (80019f8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	099b      	lsrs	r3, r3, #6
 800193c:	461a      	mov	r2, r3
 800193e:	f04f 0300 	mov.w	r3, #0
 8001942:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001946:	f04f 0100 	mov.w	r1, #0
 800194a:	ea02 0400 	and.w	r4, r2, r0
 800194e:	ea03 0501 	and.w	r5, r3, r1
 8001952:	4620      	mov	r0, r4
 8001954:	4629      	mov	r1, r5
 8001956:	f04f 0200 	mov.w	r2, #0
 800195a:	f04f 0300 	mov.w	r3, #0
 800195e:	014b      	lsls	r3, r1, #5
 8001960:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001964:	0142      	lsls	r2, r0, #5
 8001966:	4610      	mov	r0, r2
 8001968:	4619      	mov	r1, r3
 800196a:	1b00      	subs	r0, r0, r4
 800196c:	eb61 0105 	sbc.w	r1, r1, r5
 8001970:	f04f 0200 	mov.w	r2, #0
 8001974:	f04f 0300 	mov.w	r3, #0
 8001978:	018b      	lsls	r3, r1, #6
 800197a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800197e:	0182      	lsls	r2, r0, #6
 8001980:	1a12      	subs	r2, r2, r0
 8001982:	eb63 0301 	sbc.w	r3, r3, r1
 8001986:	f04f 0000 	mov.w	r0, #0
 800198a:	f04f 0100 	mov.w	r1, #0
 800198e:	00d9      	lsls	r1, r3, #3
 8001990:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001994:	00d0      	lsls	r0, r2, #3
 8001996:	4602      	mov	r2, r0
 8001998:	460b      	mov	r3, r1
 800199a:	1912      	adds	r2, r2, r4
 800199c:	eb45 0303 	adc.w	r3, r5, r3
 80019a0:	f04f 0000 	mov.w	r0, #0
 80019a4:	f04f 0100 	mov.w	r1, #0
 80019a8:	0299      	lsls	r1, r3, #10
 80019aa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80019ae:	0290      	lsls	r0, r2, #10
 80019b0:	4602      	mov	r2, r0
 80019b2:	460b      	mov	r3, r1
 80019b4:	4610      	mov	r0, r2
 80019b6:	4619      	mov	r1, r3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	461a      	mov	r2, r3
 80019bc:	f04f 0300 	mov.w	r3, #0
 80019c0:	f7fe fc42 	bl	8000248 <__aeabi_uldivmod>
 80019c4:	4602      	mov	r2, r0
 80019c6:	460b      	mov	r3, r1
 80019c8:	4613      	mov	r3, r2
 80019ca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80019cc:	4b0a      	ldr	r3, [pc, #40]	; (80019f8 <HAL_RCC_GetSysClockFreq+0x160>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	0c1b      	lsrs	r3, r3, #16
 80019d2:	f003 0303 	and.w	r3, r3, #3
 80019d6:	3301      	adds	r3, #1
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80019dc:	68fa      	ldr	r2, [r7, #12]
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80019e4:	60bb      	str	r3, [r7, #8]
      break;
 80019e6:	e002      	b.n	80019ee <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019e8:	4b04      	ldr	r3, [pc, #16]	; (80019fc <HAL_RCC_GetSysClockFreq+0x164>)
 80019ea:	60bb      	str	r3, [r7, #8]
      break;
 80019ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019ee:	68bb      	ldr	r3, [r7, #8]
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3710      	adds	r7, #16
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bdb0      	pop	{r4, r5, r7, pc}
 80019f8:	40023800 	.word	0x40023800
 80019fc:	00f42400 	.word	0x00f42400
 8001a00:	017d7840 	.word	0x017d7840

08001a04 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a08:	4b03      	ldr	r3, [pc, #12]	; (8001a18 <HAL_RCC_GetHCLKFreq+0x14>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	20000000 	.word	0x20000000

08001a1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a20:	f7ff fff0 	bl	8001a04 <HAL_RCC_GetHCLKFreq>
 8001a24:	4602      	mov	r2, r0
 8001a26:	4b05      	ldr	r3, [pc, #20]	; (8001a3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a28:	689b      	ldr	r3, [r3, #8]
 8001a2a:	0a9b      	lsrs	r3, r3, #10
 8001a2c:	f003 0307 	and.w	r3, r3, #7
 8001a30:	4903      	ldr	r1, [pc, #12]	; (8001a40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a32:	5ccb      	ldrb	r3, [r1, r3]
 8001a34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	40023800 	.word	0x40023800
 8001a40:	08003aa0 	.word	0x08003aa0

08001a44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a48:	f7ff ffdc 	bl	8001a04 <HAL_RCC_GetHCLKFreq>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	4b05      	ldr	r3, [pc, #20]	; (8001a64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a50:	689b      	ldr	r3, [r3, #8]
 8001a52:	0b5b      	lsrs	r3, r3, #13
 8001a54:	f003 0307 	and.w	r3, r3, #7
 8001a58:	4903      	ldr	r1, [pc, #12]	; (8001a68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a5a:	5ccb      	ldrb	r3, [r1, r3]
 8001a5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001a60:	4618      	mov	r0, r3
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	40023800 	.word	0x40023800
 8001a68:	08003aa0 	.word	0x08003aa0

08001a6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b088      	sub	sp, #32
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001a74:	2300      	movs	r3, #0
 8001a76:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001a80:	2300      	movs	r3, #0
 8001a82:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001a84:	2300      	movs	r3, #0
 8001a86:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0301 	and.w	r3, r3, #1
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d012      	beq.n	8001aba <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001a94:	4b69      	ldr	r3, [pc, #420]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	4a68      	ldr	r2, [pc, #416]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001a9a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001a9e:	6093      	str	r3, [r2, #8]
 8001aa0:	4b66      	ldr	r3, [pc, #408]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001aa2:	689a      	ldr	r2, [r3, #8]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001aa8:	4964      	ldr	r1, [pc, #400]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d101      	bne.n	8001aba <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d017      	beq.n	8001af6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001ac6:	4b5d      	ldr	r3, [pc, #372]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ac8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001acc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ad4:	4959      	ldr	r1, [pc, #356]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ae0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ae4:	d101      	bne.n	8001aea <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d101      	bne.n	8001af6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8001af2:	2301      	movs	r3, #1
 8001af4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d017      	beq.n	8001b32 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001b02:	4b4e      	ldr	r3, [pc, #312]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001b08:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b10:	494a      	ldr	r1, [pc, #296]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b12:	4313      	orrs	r3, r2
 8001b14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b1c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001b20:	d101      	bne.n	8001b26 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8001b22:	2301      	movs	r3, #1
 8001b24:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d101      	bne.n	8001b32 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d001      	beq.n	8001b42 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0320 	and.w	r3, r3, #32
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	f000 808b 	beq.w	8001c66 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b50:	4b3a      	ldr	r3, [pc, #232]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b54:	4a39      	ldr	r2, [pc, #228]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b5a:	6413      	str	r3, [r2, #64]	; 0x40
 8001b5c:	4b37      	ldr	r3, [pc, #220]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b64:	60bb      	str	r3, [r7, #8]
 8001b66:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001b68:	4b35      	ldr	r3, [pc, #212]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	4a34      	ldr	r2, [pc, #208]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001b6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b74:	f7fe ff9a 	bl	8000aac <HAL_GetTick>
 8001b78:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001b7a:	e008      	b.n	8001b8e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b7c:	f7fe ff96 	bl	8000aac <HAL_GetTick>
 8001b80:	4602      	mov	r2, r0
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	1ad3      	subs	r3, r2, r3
 8001b86:	2b64      	cmp	r3, #100	; 0x64
 8001b88:	d901      	bls.n	8001b8e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e38f      	b.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8001b8e:	4b2c      	ldr	r3, [pc, #176]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d0f0      	beq.n	8001b7c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001b9a:	4b28      	ldr	r3, [pc, #160]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ba2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d035      	beq.n	8001c16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bb2:	693a      	ldr	r2, [r7, #16]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d02e      	beq.n	8001c16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001bb8:	4b20      	ldr	r3, [pc, #128]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bbc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bc0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001bc2:	4b1e      	ldr	r3, [pc, #120]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc6:	4a1d      	ldr	r2, [pc, #116]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bcc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001bce:	4b1b      	ldr	r3, [pc, #108]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd2:	4a1a      	ldr	r2, [pc, #104]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bd8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8001bda:	4a18      	ldr	r2, [pc, #96]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001be0:	4b16      	ldr	r3, [pc, #88]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be4:	f003 0301 	and.w	r3, r3, #1
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d114      	bne.n	8001c16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bec:	f7fe ff5e 	bl	8000aac <HAL_GetTick>
 8001bf0:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bf2:	e00a      	b.n	8001c0a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bf4:	f7fe ff5a 	bl	8000aac <HAL_GetTick>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	697b      	ldr	r3, [r7, #20]
 8001bfc:	1ad3      	subs	r3, r2, r3
 8001bfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d901      	bls.n	8001c0a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e351      	b.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c0a:	4b0c      	ldr	r3, [pc, #48]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d0ee      	beq.n	8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001c1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001c22:	d111      	bne.n	8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001c24:	4b05      	ldr	r3, [pc, #20]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c30:	4b04      	ldr	r3, [pc, #16]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001c32:	400b      	ands	r3, r1
 8001c34:	4901      	ldr	r1, [pc, #4]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c36:	4313      	orrs	r3, r2
 8001c38:	608b      	str	r3, [r1, #8]
 8001c3a:	e00b      	b.n	8001c54 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	40007000 	.word	0x40007000
 8001c44:	0ffffcff 	.word	0x0ffffcff
 8001c48:	4bb3      	ldr	r3, [pc, #716]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	4ab2      	ldr	r2, [pc, #712]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c4e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001c52:	6093      	str	r3, [r2, #8]
 8001c54:	4bb0      	ldr	r3, [pc, #704]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c56:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c60:	49ad      	ldr	r1, [pc, #692]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c62:	4313      	orrs	r3, r2
 8001c64:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0310 	and.w	r3, r3, #16
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d010      	beq.n	8001c94 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001c72:	4ba9      	ldr	r3, [pc, #676]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c78:	4aa7      	ldr	r2, [pc, #668]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c7a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c7e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001c82:	4ba5      	ldr	r3, [pc, #660]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c84:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c8c:	49a2      	ldr	r1, [pc, #648]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d00a      	beq.n	8001cb6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001ca0:	4b9d      	ldr	r3, [pc, #628]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ca2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ca6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001cae:	499a      	ldr	r1, [pc, #616]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001cb0:	4313      	orrs	r3, r2
 8001cb2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d00a      	beq.n	8001cd8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001cc2:	4b95      	ldr	r3, [pc, #596]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001cc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cc8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001cd0:	4991      	ldr	r1, [pc, #580]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d00a      	beq.n	8001cfa <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001ce4:	4b8c      	ldr	r3, [pc, #560]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ce6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cea:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001cf2:	4989      	ldr	r1, [pc, #548]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d00a      	beq.n	8001d1c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001d06:	4b84      	ldr	r3, [pc, #528]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d0c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d14:	4980      	ldr	r1, [pc, #512]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d16:	4313      	orrs	r3, r2
 8001d18:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d00a      	beq.n	8001d3e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d28:	4b7b      	ldr	r3, [pc, #492]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d2e:	f023 0203 	bic.w	r2, r3, #3
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d36:	4978      	ldr	r1, [pc, #480]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d38:	4313      	orrs	r3, r2
 8001d3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d00a      	beq.n	8001d60 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001d4a:	4b73      	ldr	r3, [pc, #460]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d50:	f023 020c 	bic.w	r2, r3, #12
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d58:	496f      	ldr	r1, [pc, #444]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d5a:	4313      	orrs	r3, r2
 8001d5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d00a      	beq.n	8001d82 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001d6c:	4b6a      	ldr	r3, [pc, #424]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d72:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d7a:	4967      	ldr	r1, [pc, #412]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d00a      	beq.n	8001da4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001d8e:	4b62      	ldr	r3, [pc, #392]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d94:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d9c:	495e      	ldr	r1, [pc, #376]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d00a      	beq.n	8001dc6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001db0:	4b59      	ldr	r3, [pc, #356]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001db6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dbe:	4956      	ldr	r1, [pc, #344]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d00a      	beq.n	8001de8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001dd2:	4b51      	ldr	r3, [pc, #324]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dd8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001de0:	494d      	ldr	r1, [pc, #308]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001de2:	4313      	orrs	r3, r2
 8001de4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d00a      	beq.n	8001e0a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001df4:	4b48      	ldr	r3, [pc, #288]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dfa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e02:	4945      	ldr	r1, [pc, #276]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e04:	4313      	orrs	r3, r2
 8001e06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d00a      	beq.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001e16:	4b40      	ldr	r3, [pc, #256]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e1c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e24:	493c      	ldr	r1, [pc, #240]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e26:	4313      	orrs	r3, r2
 8001e28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d00a      	beq.n	8001e4e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001e38:	4b37      	ldr	r3, [pc, #220]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e3e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001e46:	4934      	ldr	r1, [pc, #208]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d011      	beq.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001e5a:	4b2f      	ldr	r3, [pc, #188]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e60:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001e68:	492b      	ldr	r1, [pc, #172]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001e74:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001e78:	d101      	bne.n	8001e7e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 0308 	and.w	r3, r3, #8
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d00a      	beq.n	8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001e9a:	4b1f      	ldr	r3, [pc, #124]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ea0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ea8:	491b      	ldr	r1, [pc, #108]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d00b      	beq.n	8001ed4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001ebc:	4b16      	ldr	r3, [pc, #88]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ec2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ecc:	4912      	ldr	r1, [pc, #72]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d00b      	beq.n	8001ef8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8001ee0:	4b0d      	ldr	r3, [pc, #52]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ee6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ef0:	4909      	ldr	r1, [pc, #36]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d00f      	beq.n	8001f24 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001f04:	4b04      	ldr	r3, [pc, #16]	; (8001f18 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8001f06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f0a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f14:	e002      	b.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8001f16:	bf00      	nop
 8001f18:	40023800 	.word	0x40023800
 8001f1c:	4986      	ldr	r1, [pc, #536]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d00b      	beq.n	8001f48 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8001f30:	4b81      	ldr	r3, [pc, #516]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f36:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001f40:	497d      	ldr	r1, [pc, #500]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	2b01      	cmp	r3, #1
 8001f4c:	d006      	beq.n	8001f5c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	f000 80d6 	beq.w	8002108 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001f5c:	4b76      	ldr	r3, [pc, #472]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a75      	ldr	r2, [pc, #468]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f62:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001f66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f68:	f7fe fda0 	bl	8000aac <HAL_GetTick>
 8001f6c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001f6e:	e008      	b.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001f70:	f7fe fd9c 	bl	8000aac <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	697b      	ldr	r3, [r7, #20]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b64      	cmp	r3, #100	; 0x64
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e195      	b.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001f82:	4b6d      	ldr	r3, [pc, #436]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1f0      	bne.n	8001f70 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0301 	and.w	r3, r3, #1
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d021      	beq.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x572>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d11d      	bne.n	8001fde <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8001fa2:	4b65      	ldr	r3, [pc, #404]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001fa4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fa8:	0c1b      	lsrs	r3, r3, #16
 8001faa:	f003 0303 	and.w	r3, r3, #3
 8001fae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8001fb0:	4b61      	ldr	r3, [pc, #388]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001fb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001fb6:	0e1b      	lsrs	r3, r3, #24
 8001fb8:	f003 030f 	and.w	r3, r3, #15
 8001fbc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	019a      	lsls	r2, r3, #6
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	041b      	lsls	r3, r3, #16
 8001fc8:	431a      	orrs	r2, r3
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	061b      	lsls	r3, r3, #24
 8001fce:	431a      	orrs	r2, r3
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	071b      	lsls	r3, r3, #28
 8001fd6:	4958      	ldr	r1, [pc, #352]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d004      	beq.n	8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ff2:	d00a      	beq.n	800200a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d02e      	beq.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002004:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002008:	d129      	bne.n	800205e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800200a:	4b4b      	ldr	r3, [pc, #300]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800200c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002010:	0c1b      	lsrs	r3, r3, #16
 8002012:	f003 0303 	and.w	r3, r3, #3
 8002016:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002018:	4b47      	ldr	r3, [pc, #284]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800201a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800201e:	0f1b      	lsrs	r3, r3, #28
 8002020:	f003 0307 	and.w	r3, r3, #7
 8002024:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	019a      	lsls	r2, r3, #6
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	041b      	lsls	r3, r3, #16
 8002030:	431a      	orrs	r2, r3
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	68db      	ldr	r3, [r3, #12]
 8002036:	061b      	lsls	r3, r3, #24
 8002038:	431a      	orrs	r2, r3
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	071b      	lsls	r3, r3, #28
 800203e:	493e      	ldr	r1, [pc, #248]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002040:	4313      	orrs	r3, r2
 8002042:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002046:	4b3c      	ldr	r3, [pc, #240]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002048:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800204c:	f023 021f 	bic.w	r2, r3, #31
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002054:	3b01      	subs	r3, #1
 8002056:	4938      	ldr	r1, [pc, #224]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002058:	4313      	orrs	r3, r2
 800205a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002066:	2b00      	cmp	r3, #0
 8002068:	d01d      	beq.n	80020a6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800206a:	4b33      	ldr	r3, [pc, #204]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800206c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002070:	0e1b      	lsrs	r3, r3, #24
 8002072:	f003 030f 	and.w	r3, r3, #15
 8002076:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002078:	4b2f      	ldr	r3, [pc, #188]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800207a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800207e:	0f1b      	lsrs	r3, r3, #28
 8002080:	f003 0307 	and.w	r3, r3, #7
 8002084:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	019a      	lsls	r2, r3, #6
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	691b      	ldr	r3, [r3, #16]
 8002090:	041b      	lsls	r3, r3, #16
 8002092:	431a      	orrs	r2, r3
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	061b      	lsls	r3, r3, #24
 8002098:	431a      	orrs	r2, r3
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	071b      	lsls	r3, r3, #28
 800209e:	4926      	ldr	r1, [pc, #152]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020a0:	4313      	orrs	r3, r2
 80020a2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d011      	beq.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	685b      	ldr	r3, [r3, #4]
 80020b6:	019a      	lsls	r2, r3, #6
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	691b      	ldr	r3, [r3, #16]
 80020bc:	041b      	lsls	r3, r3, #16
 80020be:	431a      	orrs	r2, r3
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	68db      	ldr	r3, [r3, #12]
 80020c4:	061b      	lsls	r3, r3, #24
 80020c6:	431a      	orrs	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	071b      	lsls	r3, r3, #28
 80020ce:	491a      	ldr	r1, [pc, #104]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020d0:	4313      	orrs	r3, r2
 80020d2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80020d6:	4b18      	ldr	r3, [pc, #96]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a17      	ldr	r2, [pc, #92]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80020e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020e2:	f7fe fce3 	bl	8000aac <HAL_GetTick>
 80020e6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80020e8:	e008      	b.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80020ea:	f7fe fcdf 	bl	8000aac <HAL_GetTick>
 80020ee:	4602      	mov	r2, r0
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	1ad3      	subs	r3, r2, r3
 80020f4:	2b64      	cmp	r3, #100	; 0x64
 80020f6:	d901      	bls.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80020f8:	2303      	movs	r3, #3
 80020fa:	e0d8      	b.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80020fc:	4b0e      	ldr	r3, [pc, #56]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d0f0      	beq.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	2b01      	cmp	r3, #1
 800210c:	f040 80ce 	bne.w	80022ac <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002110:	4b09      	ldr	r3, [pc, #36]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a08      	ldr	r2, [pc, #32]	; (8002138 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002116:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800211a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800211c:	f7fe fcc6 	bl	8000aac <HAL_GetTick>
 8002120:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002122:	e00b      	b.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002124:	f7fe fcc2 	bl	8000aac <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	1ad3      	subs	r3, r2, r3
 800212e:	2b64      	cmp	r3, #100	; 0x64
 8002130:	d904      	bls.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002132:	2303      	movs	r3, #3
 8002134:	e0bb      	b.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002136:	bf00      	nop
 8002138:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800213c:	4b5e      	ldr	r3, [pc, #376]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002144:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002148:	d0ec      	beq.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002152:	2b00      	cmp	r3, #0
 8002154:	d003      	beq.n	800215e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800215a:	2b00      	cmp	r3, #0
 800215c:	d009      	beq.n	8002172 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002166:	2b00      	cmp	r3, #0
 8002168:	d02e      	beq.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216e:	2b00      	cmp	r3, #0
 8002170:	d12a      	bne.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002172:	4b51      	ldr	r3, [pc, #324]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002174:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002178:	0c1b      	lsrs	r3, r3, #16
 800217a:	f003 0303 	and.w	r3, r3, #3
 800217e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002180:	4b4d      	ldr	r3, [pc, #308]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002186:	0f1b      	lsrs	r3, r3, #28
 8002188:	f003 0307 	and.w	r3, r3, #7
 800218c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	695b      	ldr	r3, [r3, #20]
 8002192:	019a      	lsls	r2, r3, #6
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	041b      	lsls	r3, r3, #16
 8002198:	431a      	orrs	r2, r3
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	699b      	ldr	r3, [r3, #24]
 800219e:	061b      	lsls	r3, r3, #24
 80021a0:	431a      	orrs	r2, r3
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	071b      	lsls	r3, r3, #28
 80021a6:	4944      	ldr	r1, [pc, #272]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80021a8:	4313      	orrs	r3, r2
 80021aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80021ae:	4b42      	ldr	r3, [pc, #264]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80021b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021b4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021bc:	3b01      	subs	r3, #1
 80021be:	021b      	lsls	r3, r3, #8
 80021c0:	493d      	ldr	r1, [pc, #244]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d022      	beq.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80021d8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021dc:	d11d      	bne.n	800221a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80021de:	4b36      	ldr	r3, [pc, #216]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80021e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021e4:	0e1b      	lsrs	r3, r3, #24
 80021e6:	f003 030f 	and.w	r3, r3, #15
 80021ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80021ec:	4b32      	ldr	r3, [pc, #200]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80021ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021f2:	0f1b      	lsrs	r3, r3, #28
 80021f4:	f003 0307 	and.w	r3, r3, #7
 80021f8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	019a      	lsls	r2, r3, #6
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6a1b      	ldr	r3, [r3, #32]
 8002204:	041b      	lsls	r3, r3, #16
 8002206:	431a      	orrs	r2, r3
 8002208:	693b      	ldr	r3, [r7, #16]
 800220a:	061b      	lsls	r3, r3, #24
 800220c:	431a      	orrs	r2, r3
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	071b      	lsls	r3, r3, #28
 8002212:	4929      	ldr	r1, [pc, #164]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002214:	4313      	orrs	r3, r2
 8002216:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0308 	and.w	r3, r3, #8
 8002222:	2b00      	cmp	r3, #0
 8002224:	d028      	beq.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002226:	4b24      	ldr	r3, [pc, #144]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002228:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800222c:	0e1b      	lsrs	r3, r3, #24
 800222e:	f003 030f 	and.w	r3, r3, #15
 8002232:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002234:	4b20      	ldr	r3, [pc, #128]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800223a:	0c1b      	lsrs	r3, r3, #16
 800223c:	f003 0303 	and.w	r3, r3, #3
 8002240:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	695b      	ldr	r3, [r3, #20]
 8002246:	019a      	lsls	r2, r3, #6
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	041b      	lsls	r3, r3, #16
 800224c:	431a      	orrs	r2, r3
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	061b      	lsls	r3, r3, #24
 8002252:	431a      	orrs	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	69db      	ldr	r3, [r3, #28]
 8002258:	071b      	lsls	r3, r3, #28
 800225a:	4917      	ldr	r1, [pc, #92]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800225c:	4313      	orrs	r3, r2
 800225e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002262:	4b15      	ldr	r3, [pc, #84]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002264:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002268:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002270:	4911      	ldr	r1, [pc, #68]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002272:	4313      	orrs	r3, r2
 8002274:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002278:	4b0f      	ldr	r3, [pc, #60]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a0e      	ldr	r2, [pc, #56]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800227e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002282:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002284:	f7fe fc12 	bl	8000aac <HAL_GetTick>
 8002288:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800228a:	e008      	b.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800228c:	f7fe fc0e 	bl	8000aac <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b64      	cmp	r3, #100	; 0x64
 8002298:	d901      	bls.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e007      	b.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800229e:	4b06      	ldr	r3, [pc, #24]	; (80022b8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80022a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80022aa:	d1ef      	bne.n	800228c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80022ac:	2300      	movs	r3, #0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	3720      	adds	r7, #32
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	40023800 	.word	0x40023800

080022bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e040      	b.n	8002350 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d106      	bne.n	80022e4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2200      	movs	r2, #0
 80022da:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f7fe fabc 	bl	800085c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2224      	movs	r2, #36	; 0x24
 80022e8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681a      	ldr	r2, [r3, #0]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f022 0201 	bic.w	r2, r2, #1
 80022f8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f000 fbf2 	bl	8002ae4 <UART_SetConfig>
 8002300:	4603      	mov	r3, r0
 8002302:	2b01      	cmp	r3, #1
 8002304:	d101      	bne.n	800230a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e022      	b.n	8002350 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800230e:	2b00      	cmp	r3, #0
 8002310:	d002      	beq.n	8002318 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f000 fe48 	bl	8002fa8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	685a      	ldr	r2, [r3, #4]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002326:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	689a      	ldr	r2, [r3, #8]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002336:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f042 0201 	orr.w	r2, r2, #1
 8002346:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f000 fecf 	bl	80030ec <UART_CheckIdleState>
 800234e:	4603      	mov	r3, r0
}
 8002350:	4618      	mov	r0, r3
 8002352:	3708      	adds	r7, #8
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002358:	b480      	push	{r7}
 800235a:	b08b      	sub	sp, #44	; 0x2c
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	4613      	mov	r3, r2
 8002364:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800236a:	2b20      	cmp	r3, #32
 800236c:	d156      	bne.n	800241c <HAL_UART_Transmit_IT+0xc4>
  {
    if ((pData == NULL) || (Size == 0U))
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d002      	beq.n	800237a <HAL_UART_Transmit_IT+0x22>
 8002374:	88fb      	ldrh	r3, [r7, #6]
 8002376:	2b00      	cmp	r3, #0
 8002378:	d101      	bne.n	800237e <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800237a:	2301      	movs	r3, #1
 800237c:	e04f      	b.n	800241e <HAL_UART_Transmit_IT+0xc6>
    }

    __HAL_LOCK(huart);
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002384:	2b01      	cmp	r3, #1
 8002386:	d101      	bne.n	800238c <HAL_UART_Transmit_IT+0x34>
 8002388:	2302      	movs	r3, #2
 800238a:	e048      	b.n	800241e <HAL_UART_Transmit_IT+0xc6>
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->pTxBuffPtr  = pData;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	68ba      	ldr	r2, [r7, #8]
 8002398:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	88fa      	ldrh	r2, [r7, #6]
 800239e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	88fa      	ldrh	r2, [r7, #6]
 80023a6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2200      	movs	r2, #0
 80023ae:	669a      	str	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	2200      	movs	r2, #0
 80023b4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	2221      	movs	r2, #33	; 0x21
 80023bc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	689b      	ldr	r3, [r3, #8]
 80023c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023c6:	d107      	bne.n	80023d8 <HAL_UART_Transmit_IT+0x80>
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	691b      	ldr	r3, [r3, #16]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d103      	bne.n	80023d8 <HAL_UART_Transmit_IT+0x80>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	4a16      	ldr	r2, [pc, #88]	; (800242c <HAL_UART_Transmit_IT+0xd4>)
 80023d4:	669a      	str	r2, [r3, #104]	; 0x68
 80023d6:	e002      	b.n	80023de <HAL_UART_Transmit_IT+0x86>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	4a15      	ldr	r2, [pc, #84]	; (8002430 <HAL_UART_Transmit_IT+0xd8>)
 80023dc:	669a      	str	r2, [r3, #104]	; 0x68
    }

    __HAL_UNLOCK(huart);
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	e853 3f00 	ldrex	r3, [r3]
 80023f2:	613b      	str	r3, [r7, #16]
   return(result);
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023fa:	627b      	str	r3, [r7, #36]	; 0x24
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	461a      	mov	r2, r3
 8002402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002404:	623b      	str	r3, [r7, #32]
 8002406:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002408:	69f9      	ldr	r1, [r7, #28]
 800240a:	6a3a      	ldr	r2, [r7, #32]
 800240c:	e841 2300 	strex	r3, r2, [r1]
 8002410:	61bb      	str	r3, [r7, #24]
   return(result);
 8002412:	69bb      	ldr	r3, [r7, #24]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d1e6      	bne.n	80023e6 <HAL_UART_Transmit_IT+0x8e>

    return HAL_OK;
 8002418:	2300      	movs	r3, #0
 800241a:	e000      	b.n	800241e <HAL_UART_Transmit_IT+0xc6>
  }
  else
  {
    return HAL_BUSY;
 800241c:	2302      	movs	r3, #2
  }
}
 800241e:	4618      	mov	r0, r3
 8002420:	372c      	adds	r7, #44	; 0x2c
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	08003645 	.word	0x08003645
 8002430:	0800358f 	.word	0x0800358f

08002434 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b08a      	sub	sp, #40	; 0x28
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	4613      	mov	r3, r2
 8002440:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002446:	2b20      	cmp	r3, #32
 8002448:	d13d      	bne.n	80024c6 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d002      	beq.n	8002456 <HAL_UART_Receive_IT+0x22>
 8002450:	88fb      	ldrh	r3, [r7, #6]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d101      	bne.n	800245a <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e036      	b.n	80024c8 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002460:	2b01      	cmp	r3, #1
 8002462:	d101      	bne.n	8002468 <HAL_UART_Receive_IT+0x34>
 8002464:	2302      	movs	r3, #2
 8002466:	e02f      	b.n	80024c8 <HAL_UART_Receive_IT+0x94>
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2200      	movs	r2, #0
 8002474:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d018      	beq.n	80024b6 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	e853 3f00 	ldrex	r3, [r3]
 8002490:	613b      	str	r3, [r7, #16]
   return(result);
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002498:	627b      	str	r3, [r7, #36]	; 0x24
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	461a      	mov	r2, r3
 80024a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a2:	623b      	str	r3, [r7, #32]
 80024a4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80024a6:	69f9      	ldr	r1, [r7, #28]
 80024a8:	6a3a      	ldr	r2, [r7, #32]
 80024aa:	e841 2300 	strex	r3, r2, [r1]
 80024ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d1e6      	bne.n	8002484 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80024b6:	88fb      	ldrh	r3, [r7, #6]
 80024b8:	461a      	mov	r2, r3
 80024ba:	68b9      	ldr	r1, [r7, #8]
 80024bc:	68f8      	ldr	r0, [r7, #12]
 80024be:	f000 ff23 	bl	8003308 <UART_Start_Receive_IT>
 80024c2:	4603      	mov	r3, r0
 80024c4:	e000      	b.n	80024c8 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80024c6:	2302      	movs	r3, #2
  }
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3728      	adds	r7, #40	; 0x28
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}

080024d0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b0ba      	sub	sp, #232	; 0xe8
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	69db      	ldr	r3, [r3, #28]
 80024de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80024f6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80024fa:	f640 030f 	movw	r3, #2063	; 0x80f
 80024fe:	4013      	ands	r3, r2
 8002500:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002504:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002508:	2b00      	cmp	r3, #0
 800250a:	d115      	bne.n	8002538 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800250c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002510:	f003 0320 	and.w	r3, r3, #32
 8002514:	2b00      	cmp	r3, #0
 8002516:	d00f      	beq.n	8002538 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002518:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800251c:	f003 0320 	and.w	r3, r3, #32
 8002520:	2b00      	cmp	r3, #0
 8002522:	d009      	beq.n	8002538 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002528:	2b00      	cmp	r3, #0
 800252a:	f000 82a4 	beq.w	8002a76 <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	4798      	blx	r3
      }
      return;
 8002536:	e29e      	b.n	8002a76 <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002538:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800253c:	2b00      	cmp	r3, #0
 800253e:	f000 8117 	beq.w	8002770 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002542:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	2b00      	cmp	r3, #0
 800254c:	d106      	bne.n	800255c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800254e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002552:	4b85      	ldr	r3, [pc, #532]	; (8002768 <HAL_UART_IRQHandler+0x298>)
 8002554:	4013      	ands	r3, r2
 8002556:	2b00      	cmp	r3, #0
 8002558:	f000 810a 	beq.w	8002770 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800255c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002560:	f003 0301 	and.w	r3, r3, #1
 8002564:	2b00      	cmp	r3, #0
 8002566:	d011      	beq.n	800258c <HAL_UART_IRQHandler+0xbc>
 8002568:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800256c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002570:	2b00      	cmp	r3, #0
 8002572:	d00b      	beq.n	800258c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	2201      	movs	r2, #1
 800257a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002582:	f043 0201 	orr.w	r2, r3, #1
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800258c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002590:	f003 0302 	and.w	r3, r3, #2
 8002594:	2b00      	cmp	r3, #0
 8002596:	d011      	beq.n	80025bc <HAL_UART_IRQHandler+0xec>
 8002598:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800259c:	f003 0301 	and.w	r3, r3, #1
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d00b      	beq.n	80025bc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2202      	movs	r2, #2
 80025aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025b2:	f043 0204 	orr.w	r2, r3, #4
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80025bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025c0:	f003 0304 	and.w	r3, r3, #4
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d011      	beq.n	80025ec <HAL_UART_IRQHandler+0x11c>
 80025c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80025cc:	f003 0301 	and.w	r3, r3, #1
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d00b      	beq.n	80025ec <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2204      	movs	r2, #4
 80025da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025e2:	f043 0202 	orr.w	r2, r3, #2
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80025ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80025f0:	f003 0308 	and.w	r3, r3, #8
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d017      	beq.n	8002628 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80025f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80025fc:	f003 0320 	and.w	r3, r3, #32
 8002600:	2b00      	cmp	r3, #0
 8002602:	d105      	bne.n	8002610 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002604:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002608:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800260c:	2b00      	cmp	r3, #0
 800260e:	d00b      	beq.n	8002628 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2208      	movs	r2, #8
 8002616:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800261e:	f043 0208 	orr.w	r2, r3, #8
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002628:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800262c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002630:	2b00      	cmp	r3, #0
 8002632:	d012      	beq.n	800265a <HAL_UART_IRQHandler+0x18a>
 8002634:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002638:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800263c:	2b00      	cmp	r3, #0
 800263e:	d00c      	beq.n	800265a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002648:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002650:	f043 0220 	orr.w	r2, r3, #32
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002660:	2b00      	cmp	r3, #0
 8002662:	f000 820a 	beq.w	8002a7a <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002666:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800266a:	f003 0320 	and.w	r3, r3, #32
 800266e:	2b00      	cmp	r3, #0
 8002670:	d00d      	beq.n	800268e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002672:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002676:	f003 0320 	and.w	r3, r3, #32
 800267a:	2b00      	cmp	r3, #0
 800267c:	d007      	beq.n	800268e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002682:	2b00      	cmp	r3, #0
 8002684:	d003      	beq.n	800268e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002694:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026a2:	2b40      	cmp	r3, #64	; 0x40
 80026a4:	d005      	beq.n	80026b2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80026a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80026aa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d04f      	beq.n	8002752 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 fef2 	bl	800349c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026c2:	2b40      	cmp	r3, #64	; 0x40
 80026c4:	d141      	bne.n	800274a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	3308      	adds	r3, #8
 80026cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026d0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80026d4:	e853 3f00 	ldrex	r3, [r3]
 80026d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80026dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80026e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80026e4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	3308      	adds	r3, #8
 80026ee:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80026f2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80026f6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026fa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80026fe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002702:	e841 2300 	strex	r3, r2, [r1]
 8002706:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800270a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d1d9      	bne.n	80026c6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002716:	2b00      	cmp	r3, #0
 8002718:	d013      	beq.n	8002742 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800271e:	4a13      	ldr	r2, [pc, #76]	; (800276c <HAL_UART_IRQHandler+0x29c>)
 8002720:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002726:	4618      	mov	r0, r3
 8002728:	f7fe fb4d 	bl	8000dc6 <HAL_DMA_Abort_IT>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d017      	beq.n	8002762 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002736:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002738:	687a      	ldr	r2, [r7, #4]
 800273a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800273c:	4610      	mov	r0, r2
 800273e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002740:	e00f      	b.n	8002762 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002742:	6878      	ldr	r0, [r7, #4]
 8002744:	f000 f9ae 	bl	8002aa4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002748:	e00b      	b.n	8002762 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f000 f9aa 	bl	8002aa4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002750:	e007      	b.n	8002762 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002752:	6878      	ldr	r0, [r7, #4]
 8002754:	f000 f9a6 	bl	8002aa4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	2200      	movs	r2, #0
 800275c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8002760:	e18b      	b.n	8002a7a <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002762:	bf00      	nop
    return;
 8002764:	e189      	b.n	8002a7a <HAL_UART_IRQHandler+0x5aa>
 8002766:	bf00      	nop
 8002768:	04000120 	.word	0x04000120
 800276c:	08003563 	.word	0x08003563

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002774:	2b01      	cmp	r3, #1
 8002776:	f040 8144 	bne.w	8002a02 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800277a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800277e:	f003 0310 	and.w	r3, r3, #16
 8002782:	2b00      	cmp	r3, #0
 8002784:	f000 813d 	beq.w	8002a02 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002788:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800278c:	f003 0310 	and.w	r3, r3, #16
 8002790:	2b00      	cmp	r3, #0
 8002792:	f000 8136 	beq.w	8002a02 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2210      	movs	r2, #16
 800279c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027a8:	2b40      	cmp	r3, #64	; 0x40
 80027aa:	f040 80b2 	bne.w	8002912 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80027ba:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80027be:	2b00      	cmp	r3, #0
 80027c0:	f000 815d 	beq.w	8002a7e <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80027ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80027ce:	429a      	cmp	r2, r3
 80027d0:	f080 8155 	bcs.w	8002a7e <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80027da:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e2:	69db      	ldr	r3, [r3, #28]
 80027e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027e8:	f000 8085 	beq.w	80028f6 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027f4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80027f8:	e853 3f00 	ldrex	r3, [r3]
 80027fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002800:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002804:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002808:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	461a      	mov	r2, r3
 8002812:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002816:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800281a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800281e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002822:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002826:	e841 2300 	strex	r3, r2, [r1]
 800282a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800282e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002832:	2b00      	cmp	r3, #0
 8002834:	d1da      	bne.n	80027ec <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	3308      	adds	r3, #8
 800283c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800283e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002840:	e853 3f00 	ldrex	r3, [r3]
 8002844:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002846:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002848:	f023 0301 	bic.w	r3, r3, #1
 800284c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	3308      	adds	r3, #8
 8002856:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800285a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800285e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002860:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002862:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002866:	e841 2300 	strex	r3, r2, [r1]
 800286a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800286c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800286e:	2b00      	cmp	r3, #0
 8002870:	d1e1      	bne.n	8002836 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	3308      	adds	r3, #8
 8002878:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800287a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800287c:	e853 3f00 	ldrex	r3, [r3]
 8002880:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002882:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002884:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002888:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	3308      	adds	r3, #8
 8002892:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002896:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002898:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800289a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800289c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800289e:	e841 2300 	strex	r3, r2, [r1]
 80028a2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80028a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d1e3      	bne.n	8002872 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2220      	movs	r2, #32
 80028ae:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2200      	movs	r2, #0
 80028b4:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80028bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80028be:	e853 3f00 	ldrex	r3, [r3]
 80028c2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80028c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80028c6:	f023 0310 	bic.w	r3, r3, #16
 80028ca:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	461a      	mov	r2, r3
 80028d4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80028d8:	65bb      	str	r3, [r7, #88]	; 0x58
 80028da:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80028dc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80028de:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80028e0:	e841 2300 	strex	r3, r2, [r1]
 80028e4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80028e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d1e4      	bne.n	80028b6 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f0:	4618      	mov	r0, r3
 80028f2:	f7fe f9f8 	bl	8000ce6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002902:	b29b      	uxth	r3, r3
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	b29b      	uxth	r3, r3
 8002908:	4619      	mov	r1, r3
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f000 f8d4 	bl	8002ab8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002910:	e0b5      	b.n	8002a7e <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800291e:	b29b      	uxth	r3, r3
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800292c:	b29b      	uxth	r3, r3
 800292e:	2b00      	cmp	r3, #0
 8002930:	f000 80a7 	beq.w	8002a82 <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8002934:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002938:	2b00      	cmp	r3, #0
 800293a:	f000 80a2 	beq.w	8002a82 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002946:	e853 3f00 	ldrex	r3, [r3]
 800294a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800294c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800294e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002952:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	461a      	mov	r2, r3
 800295c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002960:	647b      	str	r3, [r7, #68]	; 0x44
 8002962:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002964:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002966:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002968:	e841 2300 	strex	r3, r2, [r1]
 800296c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800296e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002970:	2b00      	cmp	r3, #0
 8002972:	d1e4      	bne.n	800293e <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	3308      	adds	r3, #8
 800297a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800297c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800297e:	e853 3f00 	ldrex	r3, [r3]
 8002982:	623b      	str	r3, [r7, #32]
   return(result);
 8002984:	6a3b      	ldr	r3, [r7, #32]
 8002986:	f023 0301 	bic.w	r3, r3, #1
 800298a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	3308      	adds	r3, #8
 8002994:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002998:	633a      	str	r2, [r7, #48]	; 0x30
 800299a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800299c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800299e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029a0:	e841 2300 	strex	r3, r2, [r1]
 80029a4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80029a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d1e3      	bne.n	8002974 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2220      	movs	r2, #32
 80029b0:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	2200      	movs	r2, #0
 80029b6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	e853 3f00 	ldrex	r3, [r3]
 80029ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f023 0310 	bic.w	r3, r3, #16
 80029d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	461a      	mov	r2, r3
 80029dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80029e0:	61fb      	str	r3, [r7, #28]
 80029e2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029e4:	69b9      	ldr	r1, [r7, #24]
 80029e6:	69fa      	ldr	r2, [r7, #28]
 80029e8:	e841 2300 	strex	r3, r2, [r1]
 80029ec:	617b      	str	r3, [r7, #20]
   return(result);
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d1e4      	bne.n	80029be <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80029f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80029f8:	4619      	mov	r1, r3
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f000 f85c 	bl	8002ab8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002a00:	e03f      	b.n	8002a82 <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002a02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00e      	beq.n	8002a2c <HAL_UART_IRQHandler+0x55c>
 8002a0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d008      	beq.n	8002a2c <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002a22:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002a24:	6878      	ldr	r0, [r7, #4]
 8002a26:	f000 f853 	bl	8002ad0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002a2a:	e02d      	b.n	8002a88 <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002a2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d00e      	beq.n	8002a56 <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002a38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d008      	beq.n	8002a56 <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d01c      	beq.n	8002a86 <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	4798      	blx	r3
    }
    return;
 8002a54:	e017      	b.n	8002a86 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002a56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d012      	beq.n	8002a88 <HAL_UART_IRQHandler+0x5b8>
 8002a62:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d00c      	beq.n	8002a88 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f000 fe48 	bl	8003704 <UART_EndTransmit_IT>
    return;
 8002a74:	e008      	b.n	8002a88 <HAL_UART_IRQHandler+0x5b8>
      return;
 8002a76:	bf00      	nop
 8002a78:	e006      	b.n	8002a88 <HAL_UART_IRQHandler+0x5b8>
    return;
 8002a7a:	bf00      	nop
 8002a7c:	e004      	b.n	8002a88 <HAL_UART_IRQHandler+0x5b8>
      return;
 8002a7e:	bf00      	nop
 8002a80:	e002      	b.n	8002a88 <HAL_UART_IRQHandler+0x5b8>
      return;
 8002a82:	bf00      	nop
 8002a84:	e000      	b.n	8002a88 <HAL_UART_IRQHandler+0x5b8>
    return;
 8002a86:	bf00      	nop
  }

}
 8002a88:	37e8      	adds	r7, #232	; 0xe8
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop

08002a90 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002a98:	bf00      	nop
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002aac:	bf00      	nop
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	460b      	mov	r3, r1
 8002ac2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002ac4:	bf00      	nop
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr

08002ad0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8002ad8:	bf00      	nop
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b088      	sub	sp, #32
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002aec:	2300      	movs	r3, #0
 8002aee:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	689a      	ldr	r2, [r3, #8]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	691b      	ldr	r3, [r3, #16]
 8002af8:	431a      	orrs	r2, r3
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	695b      	ldr	r3, [r3, #20]
 8002afe:	431a      	orrs	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	69db      	ldr	r3, [r3, #28]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	4ba7      	ldr	r3, [pc, #668]	; (8002dac <UART_SetConfig+0x2c8>)
 8002b10:	4013      	ands	r3, r2
 8002b12:	687a      	ldr	r2, [r7, #4]
 8002b14:	6812      	ldr	r2, [r2, #0]
 8002b16:	6979      	ldr	r1, [r7, #20]
 8002b18:	430b      	orrs	r3, r1
 8002b1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	68da      	ldr	r2, [r3, #12]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	430a      	orrs	r2, r1
 8002b30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	699b      	ldr	r3, [r3, #24]
 8002b36:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6a1b      	ldr	r3, [r3, #32]
 8002b3c:	697a      	ldr	r2, [r7, #20]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	697a      	ldr	r2, [r7, #20]
 8002b52:	430a      	orrs	r2, r1
 8002b54:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a95      	ldr	r2, [pc, #596]	; (8002db0 <UART_SetConfig+0x2cc>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d120      	bne.n	8002ba2 <UART_SetConfig+0xbe>
 8002b60:	4b94      	ldr	r3, [pc, #592]	; (8002db4 <UART_SetConfig+0x2d0>)
 8002b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b66:	f003 0303 	and.w	r3, r3, #3
 8002b6a:	2b03      	cmp	r3, #3
 8002b6c:	d816      	bhi.n	8002b9c <UART_SetConfig+0xb8>
 8002b6e:	a201      	add	r2, pc, #4	; (adr r2, 8002b74 <UART_SetConfig+0x90>)
 8002b70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b74:	08002b85 	.word	0x08002b85
 8002b78:	08002b91 	.word	0x08002b91
 8002b7c:	08002b8b 	.word	0x08002b8b
 8002b80:	08002b97 	.word	0x08002b97
 8002b84:	2301      	movs	r3, #1
 8002b86:	77fb      	strb	r3, [r7, #31]
 8002b88:	e14f      	b.n	8002e2a <UART_SetConfig+0x346>
 8002b8a:	2302      	movs	r3, #2
 8002b8c:	77fb      	strb	r3, [r7, #31]
 8002b8e:	e14c      	b.n	8002e2a <UART_SetConfig+0x346>
 8002b90:	2304      	movs	r3, #4
 8002b92:	77fb      	strb	r3, [r7, #31]
 8002b94:	e149      	b.n	8002e2a <UART_SetConfig+0x346>
 8002b96:	2308      	movs	r3, #8
 8002b98:	77fb      	strb	r3, [r7, #31]
 8002b9a:	e146      	b.n	8002e2a <UART_SetConfig+0x346>
 8002b9c:	2310      	movs	r3, #16
 8002b9e:	77fb      	strb	r3, [r7, #31]
 8002ba0:	e143      	b.n	8002e2a <UART_SetConfig+0x346>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a84      	ldr	r2, [pc, #528]	; (8002db8 <UART_SetConfig+0x2d4>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d132      	bne.n	8002c12 <UART_SetConfig+0x12e>
 8002bac:	4b81      	ldr	r3, [pc, #516]	; (8002db4 <UART_SetConfig+0x2d0>)
 8002bae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002bb2:	f003 030c 	and.w	r3, r3, #12
 8002bb6:	2b0c      	cmp	r3, #12
 8002bb8:	d828      	bhi.n	8002c0c <UART_SetConfig+0x128>
 8002bba:	a201      	add	r2, pc, #4	; (adr r2, 8002bc0 <UART_SetConfig+0xdc>)
 8002bbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bc0:	08002bf5 	.word	0x08002bf5
 8002bc4:	08002c0d 	.word	0x08002c0d
 8002bc8:	08002c0d 	.word	0x08002c0d
 8002bcc:	08002c0d 	.word	0x08002c0d
 8002bd0:	08002c01 	.word	0x08002c01
 8002bd4:	08002c0d 	.word	0x08002c0d
 8002bd8:	08002c0d 	.word	0x08002c0d
 8002bdc:	08002c0d 	.word	0x08002c0d
 8002be0:	08002bfb 	.word	0x08002bfb
 8002be4:	08002c0d 	.word	0x08002c0d
 8002be8:	08002c0d 	.word	0x08002c0d
 8002bec:	08002c0d 	.word	0x08002c0d
 8002bf0:	08002c07 	.word	0x08002c07
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	77fb      	strb	r3, [r7, #31]
 8002bf8:	e117      	b.n	8002e2a <UART_SetConfig+0x346>
 8002bfa:	2302      	movs	r3, #2
 8002bfc:	77fb      	strb	r3, [r7, #31]
 8002bfe:	e114      	b.n	8002e2a <UART_SetConfig+0x346>
 8002c00:	2304      	movs	r3, #4
 8002c02:	77fb      	strb	r3, [r7, #31]
 8002c04:	e111      	b.n	8002e2a <UART_SetConfig+0x346>
 8002c06:	2308      	movs	r3, #8
 8002c08:	77fb      	strb	r3, [r7, #31]
 8002c0a:	e10e      	b.n	8002e2a <UART_SetConfig+0x346>
 8002c0c:	2310      	movs	r3, #16
 8002c0e:	77fb      	strb	r3, [r7, #31]
 8002c10:	e10b      	b.n	8002e2a <UART_SetConfig+0x346>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	4a69      	ldr	r2, [pc, #420]	; (8002dbc <UART_SetConfig+0x2d8>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d120      	bne.n	8002c5e <UART_SetConfig+0x17a>
 8002c1c:	4b65      	ldr	r3, [pc, #404]	; (8002db4 <UART_SetConfig+0x2d0>)
 8002c1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c22:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002c26:	2b30      	cmp	r3, #48	; 0x30
 8002c28:	d013      	beq.n	8002c52 <UART_SetConfig+0x16e>
 8002c2a:	2b30      	cmp	r3, #48	; 0x30
 8002c2c:	d814      	bhi.n	8002c58 <UART_SetConfig+0x174>
 8002c2e:	2b20      	cmp	r3, #32
 8002c30:	d009      	beq.n	8002c46 <UART_SetConfig+0x162>
 8002c32:	2b20      	cmp	r3, #32
 8002c34:	d810      	bhi.n	8002c58 <UART_SetConfig+0x174>
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d002      	beq.n	8002c40 <UART_SetConfig+0x15c>
 8002c3a:	2b10      	cmp	r3, #16
 8002c3c:	d006      	beq.n	8002c4c <UART_SetConfig+0x168>
 8002c3e:	e00b      	b.n	8002c58 <UART_SetConfig+0x174>
 8002c40:	2300      	movs	r3, #0
 8002c42:	77fb      	strb	r3, [r7, #31]
 8002c44:	e0f1      	b.n	8002e2a <UART_SetConfig+0x346>
 8002c46:	2302      	movs	r3, #2
 8002c48:	77fb      	strb	r3, [r7, #31]
 8002c4a:	e0ee      	b.n	8002e2a <UART_SetConfig+0x346>
 8002c4c:	2304      	movs	r3, #4
 8002c4e:	77fb      	strb	r3, [r7, #31]
 8002c50:	e0eb      	b.n	8002e2a <UART_SetConfig+0x346>
 8002c52:	2308      	movs	r3, #8
 8002c54:	77fb      	strb	r3, [r7, #31]
 8002c56:	e0e8      	b.n	8002e2a <UART_SetConfig+0x346>
 8002c58:	2310      	movs	r3, #16
 8002c5a:	77fb      	strb	r3, [r7, #31]
 8002c5c:	e0e5      	b.n	8002e2a <UART_SetConfig+0x346>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a57      	ldr	r2, [pc, #348]	; (8002dc0 <UART_SetConfig+0x2dc>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d120      	bne.n	8002caa <UART_SetConfig+0x1c6>
 8002c68:	4b52      	ldr	r3, [pc, #328]	; (8002db4 <UART_SetConfig+0x2d0>)
 8002c6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c6e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002c72:	2bc0      	cmp	r3, #192	; 0xc0
 8002c74:	d013      	beq.n	8002c9e <UART_SetConfig+0x1ba>
 8002c76:	2bc0      	cmp	r3, #192	; 0xc0
 8002c78:	d814      	bhi.n	8002ca4 <UART_SetConfig+0x1c0>
 8002c7a:	2b80      	cmp	r3, #128	; 0x80
 8002c7c:	d009      	beq.n	8002c92 <UART_SetConfig+0x1ae>
 8002c7e:	2b80      	cmp	r3, #128	; 0x80
 8002c80:	d810      	bhi.n	8002ca4 <UART_SetConfig+0x1c0>
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d002      	beq.n	8002c8c <UART_SetConfig+0x1a8>
 8002c86:	2b40      	cmp	r3, #64	; 0x40
 8002c88:	d006      	beq.n	8002c98 <UART_SetConfig+0x1b4>
 8002c8a:	e00b      	b.n	8002ca4 <UART_SetConfig+0x1c0>
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	77fb      	strb	r3, [r7, #31]
 8002c90:	e0cb      	b.n	8002e2a <UART_SetConfig+0x346>
 8002c92:	2302      	movs	r3, #2
 8002c94:	77fb      	strb	r3, [r7, #31]
 8002c96:	e0c8      	b.n	8002e2a <UART_SetConfig+0x346>
 8002c98:	2304      	movs	r3, #4
 8002c9a:	77fb      	strb	r3, [r7, #31]
 8002c9c:	e0c5      	b.n	8002e2a <UART_SetConfig+0x346>
 8002c9e:	2308      	movs	r3, #8
 8002ca0:	77fb      	strb	r3, [r7, #31]
 8002ca2:	e0c2      	b.n	8002e2a <UART_SetConfig+0x346>
 8002ca4:	2310      	movs	r3, #16
 8002ca6:	77fb      	strb	r3, [r7, #31]
 8002ca8:	e0bf      	b.n	8002e2a <UART_SetConfig+0x346>
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a45      	ldr	r2, [pc, #276]	; (8002dc4 <UART_SetConfig+0x2e0>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d125      	bne.n	8002d00 <UART_SetConfig+0x21c>
 8002cb4:	4b3f      	ldr	r3, [pc, #252]	; (8002db4 <UART_SetConfig+0x2d0>)
 8002cb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cbe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002cc2:	d017      	beq.n	8002cf4 <UART_SetConfig+0x210>
 8002cc4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002cc8:	d817      	bhi.n	8002cfa <UART_SetConfig+0x216>
 8002cca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cce:	d00b      	beq.n	8002ce8 <UART_SetConfig+0x204>
 8002cd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002cd4:	d811      	bhi.n	8002cfa <UART_SetConfig+0x216>
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d003      	beq.n	8002ce2 <UART_SetConfig+0x1fe>
 8002cda:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cde:	d006      	beq.n	8002cee <UART_SetConfig+0x20a>
 8002ce0:	e00b      	b.n	8002cfa <UART_SetConfig+0x216>
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	77fb      	strb	r3, [r7, #31]
 8002ce6:	e0a0      	b.n	8002e2a <UART_SetConfig+0x346>
 8002ce8:	2302      	movs	r3, #2
 8002cea:	77fb      	strb	r3, [r7, #31]
 8002cec:	e09d      	b.n	8002e2a <UART_SetConfig+0x346>
 8002cee:	2304      	movs	r3, #4
 8002cf0:	77fb      	strb	r3, [r7, #31]
 8002cf2:	e09a      	b.n	8002e2a <UART_SetConfig+0x346>
 8002cf4:	2308      	movs	r3, #8
 8002cf6:	77fb      	strb	r3, [r7, #31]
 8002cf8:	e097      	b.n	8002e2a <UART_SetConfig+0x346>
 8002cfa:	2310      	movs	r3, #16
 8002cfc:	77fb      	strb	r3, [r7, #31]
 8002cfe:	e094      	b.n	8002e2a <UART_SetConfig+0x346>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a30      	ldr	r2, [pc, #192]	; (8002dc8 <UART_SetConfig+0x2e4>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d125      	bne.n	8002d56 <UART_SetConfig+0x272>
 8002d0a:	4b2a      	ldr	r3, [pc, #168]	; (8002db4 <UART_SetConfig+0x2d0>)
 8002d0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d10:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002d14:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002d18:	d017      	beq.n	8002d4a <UART_SetConfig+0x266>
 8002d1a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002d1e:	d817      	bhi.n	8002d50 <UART_SetConfig+0x26c>
 8002d20:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d24:	d00b      	beq.n	8002d3e <UART_SetConfig+0x25a>
 8002d26:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d2a:	d811      	bhi.n	8002d50 <UART_SetConfig+0x26c>
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d003      	beq.n	8002d38 <UART_SetConfig+0x254>
 8002d30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d34:	d006      	beq.n	8002d44 <UART_SetConfig+0x260>
 8002d36:	e00b      	b.n	8002d50 <UART_SetConfig+0x26c>
 8002d38:	2301      	movs	r3, #1
 8002d3a:	77fb      	strb	r3, [r7, #31]
 8002d3c:	e075      	b.n	8002e2a <UART_SetConfig+0x346>
 8002d3e:	2302      	movs	r3, #2
 8002d40:	77fb      	strb	r3, [r7, #31]
 8002d42:	e072      	b.n	8002e2a <UART_SetConfig+0x346>
 8002d44:	2304      	movs	r3, #4
 8002d46:	77fb      	strb	r3, [r7, #31]
 8002d48:	e06f      	b.n	8002e2a <UART_SetConfig+0x346>
 8002d4a:	2308      	movs	r3, #8
 8002d4c:	77fb      	strb	r3, [r7, #31]
 8002d4e:	e06c      	b.n	8002e2a <UART_SetConfig+0x346>
 8002d50:	2310      	movs	r3, #16
 8002d52:	77fb      	strb	r3, [r7, #31]
 8002d54:	e069      	b.n	8002e2a <UART_SetConfig+0x346>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a1c      	ldr	r2, [pc, #112]	; (8002dcc <UART_SetConfig+0x2e8>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d137      	bne.n	8002dd0 <UART_SetConfig+0x2ec>
 8002d60:	4b14      	ldr	r3, [pc, #80]	; (8002db4 <UART_SetConfig+0x2d0>)
 8002d62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d66:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002d6a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002d6e:	d017      	beq.n	8002da0 <UART_SetConfig+0x2bc>
 8002d70:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002d74:	d817      	bhi.n	8002da6 <UART_SetConfig+0x2c2>
 8002d76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d7a:	d00b      	beq.n	8002d94 <UART_SetConfig+0x2b0>
 8002d7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d80:	d811      	bhi.n	8002da6 <UART_SetConfig+0x2c2>
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d003      	beq.n	8002d8e <UART_SetConfig+0x2aa>
 8002d86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d8a:	d006      	beq.n	8002d9a <UART_SetConfig+0x2b6>
 8002d8c:	e00b      	b.n	8002da6 <UART_SetConfig+0x2c2>
 8002d8e:	2300      	movs	r3, #0
 8002d90:	77fb      	strb	r3, [r7, #31]
 8002d92:	e04a      	b.n	8002e2a <UART_SetConfig+0x346>
 8002d94:	2302      	movs	r3, #2
 8002d96:	77fb      	strb	r3, [r7, #31]
 8002d98:	e047      	b.n	8002e2a <UART_SetConfig+0x346>
 8002d9a:	2304      	movs	r3, #4
 8002d9c:	77fb      	strb	r3, [r7, #31]
 8002d9e:	e044      	b.n	8002e2a <UART_SetConfig+0x346>
 8002da0:	2308      	movs	r3, #8
 8002da2:	77fb      	strb	r3, [r7, #31]
 8002da4:	e041      	b.n	8002e2a <UART_SetConfig+0x346>
 8002da6:	2310      	movs	r3, #16
 8002da8:	77fb      	strb	r3, [r7, #31]
 8002daa:	e03e      	b.n	8002e2a <UART_SetConfig+0x346>
 8002dac:	efff69f3 	.word	0xefff69f3
 8002db0:	40011000 	.word	0x40011000
 8002db4:	40023800 	.word	0x40023800
 8002db8:	40004400 	.word	0x40004400
 8002dbc:	40004800 	.word	0x40004800
 8002dc0:	40004c00 	.word	0x40004c00
 8002dc4:	40005000 	.word	0x40005000
 8002dc8:	40011400 	.word	0x40011400
 8002dcc:	40007800 	.word	0x40007800
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a71      	ldr	r2, [pc, #452]	; (8002f9c <UART_SetConfig+0x4b8>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d125      	bne.n	8002e26 <UART_SetConfig+0x342>
 8002dda:	4b71      	ldr	r3, [pc, #452]	; (8002fa0 <UART_SetConfig+0x4bc>)
 8002ddc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002de0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002de4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002de8:	d017      	beq.n	8002e1a <UART_SetConfig+0x336>
 8002dea:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002dee:	d817      	bhi.n	8002e20 <UART_SetConfig+0x33c>
 8002df0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002df4:	d00b      	beq.n	8002e0e <UART_SetConfig+0x32a>
 8002df6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002dfa:	d811      	bhi.n	8002e20 <UART_SetConfig+0x33c>
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d003      	beq.n	8002e08 <UART_SetConfig+0x324>
 8002e00:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002e04:	d006      	beq.n	8002e14 <UART_SetConfig+0x330>
 8002e06:	e00b      	b.n	8002e20 <UART_SetConfig+0x33c>
 8002e08:	2300      	movs	r3, #0
 8002e0a:	77fb      	strb	r3, [r7, #31]
 8002e0c:	e00d      	b.n	8002e2a <UART_SetConfig+0x346>
 8002e0e:	2302      	movs	r3, #2
 8002e10:	77fb      	strb	r3, [r7, #31]
 8002e12:	e00a      	b.n	8002e2a <UART_SetConfig+0x346>
 8002e14:	2304      	movs	r3, #4
 8002e16:	77fb      	strb	r3, [r7, #31]
 8002e18:	e007      	b.n	8002e2a <UART_SetConfig+0x346>
 8002e1a:	2308      	movs	r3, #8
 8002e1c:	77fb      	strb	r3, [r7, #31]
 8002e1e:	e004      	b.n	8002e2a <UART_SetConfig+0x346>
 8002e20:	2310      	movs	r3, #16
 8002e22:	77fb      	strb	r3, [r7, #31]
 8002e24:	e001      	b.n	8002e2a <UART_SetConfig+0x346>
 8002e26:	2310      	movs	r3, #16
 8002e28:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	69db      	ldr	r3, [r3, #28]
 8002e2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e32:	d15a      	bne.n	8002eea <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8002e34:	7ffb      	ldrb	r3, [r7, #31]
 8002e36:	2b08      	cmp	r3, #8
 8002e38:	d827      	bhi.n	8002e8a <UART_SetConfig+0x3a6>
 8002e3a:	a201      	add	r2, pc, #4	; (adr r2, 8002e40 <UART_SetConfig+0x35c>)
 8002e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e40:	08002e65 	.word	0x08002e65
 8002e44:	08002e6d 	.word	0x08002e6d
 8002e48:	08002e75 	.word	0x08002e75
 8002e4c:	08002e8b 	.word	0x08002e8b
 8002e50:	08002e7b 	.word	0x08002e7b
 8002e54:	08002e8b 	.word	0x08002e8b
 8002e58:	08002e8b 	.word	0x08002e8b
 8002e5c:	08002e8b 	.word	0x08002e8b
 8002e60:	08002e83 	.word	0x08002e83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e64:	f7fe fdda 	bl	8001a1c <HAL_RCC_GetPCLK1Freq>
 8002e68:	61b8      	str	r0, [r7, #24]
        break;
 8002e6a:	e013      	b.n	8002e94 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002e6c:	f7fe fdea 	bl	8001a44 <HAL_RCC_GetPCLK2Freq>
 8002e70:	61b8      	str	r0, [r7, #24]
        break;
 8002e72:	e00f      	b.n	8002e94 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e74:	4b4b      	ldr	r3, [pc, #300]	; (8002fa4 <UART_SetConfig+0x4c0>)
 8002e76:	61bb      	str	r3, [r7, #24]
        break;
 8002e78:	e00c      	b.n	8002e94 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e7a:	f7fe fd0d 	bl	8001898 <HAL_RCC_GetSysClockFreq>
 8002e7e:	61b8      	str	r0, [r7, #24]
        break;
 8002e80:	e008      	b.n	8002e94 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e86:	61bb      	str	r3, [r7, #24]
        break;
 8002e88:	e004      	b.n	8002e94 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	77bb      	strb	r3, [r7, #30]
        break;
 8002e92:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002e94:	69bb      	ldr	r3, [r7, #24]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d074      	beq.n	8002f84 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002e9a:	69bb      	ldr	r3, [r7, #24]
 8002e9c:	005a      	lsls	r2, r3, #1
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	085b      	lsrs	r3, r3, #1
 8002ea4:	441a      	add	r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eae:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	2b0f      	cmp	r3, #15
 8002eb4:	d916      	bls.n	8002ee4 <UART_SetConfig+0x400>
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ebc:	d212      	bcs.n	8002ee4 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	b29b      	uxth	r3, r3
 8002ec2:	f023 030f 	bic.w	r3, r3, #15
 8002ec6:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002ec8:	693b      	ldr	r3, [r7, #16]
 8002eca:	085b      	lsrs	r3, r3, #1
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	f003 0307 	and.w	r3, r3, #7
 8002ed2:	b29a      	uxth	r2, r3
 8002ed4:	89fb      	ldrh	r3, [r7, #14]
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	89fa      	ldrh	r2, [r7, #14]
 8002ee0:	60da      	str	r2, [r3, #12]
 8002ee2:	e04f      	b.n	8002f84 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	77bb      	strb	r3, [r7, #30]
 8002ee8:	e04c      	b.n	8002f84 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002eea:	7ffb      	ldrb	r3, [r7, #31]
 8002eec:	2b08      	cmp	r3, #8
 8002eee:	d828      	bhi.n	8002f42 <UART_SetConfig+0x45e>
 8002ef0:	a201      	add	r2, pc, #4	; (adr r2, 8002ef8 <UART_SetConfig+0x414>)
 8002ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ef6:	bf00      	nop
 8002ef8:	08002f1d 	.word	0x08002f1d
 8002efc:	08002f25 	.word	0x08002f25
 8002f00:	08002f2d 	.word	0x08002f2d
 8002f04:	08002f43 	.word	0x08002f43
 8002f08:	08002f33 	.word	0x08002f33
 8002f0c:	08002f43 	.word	0x08002f43
 8002f10:	08002f43 	.word	0x08002f43
 8002f14:	08002f43 	.word	0x08002f43
 8002f18:	08002f3b 	.word	0x08002f3b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f1c:	f7fe fd7e 	bl	8001a1c <HAL_RCC_GetPCLK1Freq>
 8002f20:	61b8      	str	r0, [r7, #24]
        break;
 8002f22:	e013      	b.n	8002f4c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f24:	f7fe fd8e 	bl	8001a44 <HAL_RCC_GetPCLK2Freq>
 8002f28:	61b8      	str	r0, [r7, #24]
        break;
 8002f2a:	e00f      	b.n	8002f4c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f2c:	4b1d      	ldr	r3, [pc, #116]	; (8002fa4 <UART_SetConfig+0x4c0>)
 8002f2e:	61bb      	str	r3, [r7, #24]
        break;
 8002f30:	e00c      	b.n	8002f4c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f32:	f7fe fcb1 	bl	8001898 <HAL_RCC_GetSysClockFreq>
 8002f36:	61b8      	str	r0, [r7, #24]
        break;
 8002f38:	e008      	b.n	8002f4c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f3a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f3e:	61bb      	str	r3, [r7, #24]
        break;
 8002f40:	e004      	b.n	8002f4c <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8002f42:	2300      	movs	r3, #0
 8002f44:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8002f46:	2301      	movs	r3, #1
 8002f48:	77bb      	strb	r3, [r7, #30]
        break;
 8002f4a:	bf00      	nop
    }

    if (pclk != 0U)
 8002f4c:	69bb      	ldr	r3, [r7, #24]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d018      	beq.n	8002f84 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	085a      	lsrs	r2, r3, #1
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	441a      	add	r2, r3
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f64:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	2b0f      	cmp	r3, #15
 8002f6a:	d909      	bls.n	8002f80 <UART_SetConfig+0x49c>
 8002f6c:	693b      	ldr	r3, [r7, #16]
 8002f6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f72:	d205      	bcs.n	8002f80 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002f74:	693b      	ldr	r3, [r7, #16]
 8002f76:	b29a      	uxth	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	60da      	str	r2, [r3, #12]
 8002f7e:	e001      	b.n	8002f84 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002f90:	7fbb      	ldrb	r3, [r7, #30]
}
 8002f92:	4618      	mov	r0, r3
 8002f94:	3720      	adds	r7, #32
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	40007c00 	.word	0x40007c00
 8002fa0:	40023800 	.word	0x40023800
 8002fa4:	00f42400 	.word	0x00f42400

08002fa8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b083      	sub	sp, #12
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb4:	f003 0301 	and.w	r3, r3, #1
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d00a      	beq.n	8002fd2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd6:	f003 0302 	and.w	r3, r3, #2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d00a      	beq.n	8002ff4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff8:	f003 0304 	and.w	r3, r3, #4
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d00a      	beq.n	8003016 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	430a      	orrs	r2, r1
 8003014:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800301a:	f003 0308 	and.w	r3, r3, #8
 800301e:	2b00      	cmp	r3, #0
 8003020:	d00a      	beq.n	8003038 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	685b      	ldr	r3, [r3, #4]
 8003028:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	430a      	orrs	r2, r1
 8003036:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303c:	f003 0310 	and.w	r3, r3, #16
 8003040:	2b00      	cmp	r3, #0
 8003042:	d00a      	beq.n	800305a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	430a      	orrs	r2, r1
 8003058:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305e:	f003 0320 	and.w	r3, r3, #32
 8003062:	2b00      	cmp	r3, #0
 8003064:	d00a      	beq.n	800307c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	430a      	orrs	r2, r1
 800307a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003080:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003084:	2b00      	cmp	r3, #0
 8003086:	d01a      	beq.n	80030be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	430a      	orrs	r2, r1
 800309c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030a6:	d10a      	bne.n	80030be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	430a      	orrs	r2, r1
 80030bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d00a      	beq.n	80030e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	430a      	orrs	r2, r1
 80030de:	605a      	str	r2, [r3, #4]
  }
}
 80030e0:	bf00      	nop
 80030e2:	370c      	adds	r7, #12
 80030e4:	46bd      	mov	sp, r7
 80030e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ea:	4770      	bx	lr

080030ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b086      	sub	sp, #24
 80030f0:	af02      	add	r7, sp, #8
 80030f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80030fc:	f7fd fcd6 	bl	8000aac <HAL_GetTick>
 8003100:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f003 0308 	and.w	r3, r3, #8
 800310c:	2b08      	cmp	r3, #8
 800310e:	d10e      	bne.n	800312e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003110:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003114:	9300      	str	r3, [sp, #0]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	2200      	movs	r2, #0
 800311a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f000 f82d 	bl	800317e <UART_WaitOnFlagUntilTimeout>
 8003124:	4603      	mov	r3, r0
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e023      	b.n	8003176 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0304 	and.w	r3, r3, #4
 8003138:	2b04      	cmp	r3, #4
 800313a:	d10e      	bne.n	800315a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800313c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003140:	9300      	str	r3, [sp, #0]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	2200      	movs	r2, #0
 8003146:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 f817 	bl	800317e <UART_WaitOnFlagUntilTimeout>
 8003150:	4603      	mov	r3, r0
 8003152:	2b00      	cmp	r3, #0
 8003154:	d001      	beq.n	800315a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e00d      	b.n	8003176 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2220      	movs	r2, #32
 800315e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2220      	movs	r2, #32
 8003164:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003174:	2300      	movs	r3, #0
}
 8003176:	4618      	mov	r0, r3
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}

0800317e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800317e:	b580      	push	{r7, lr}
 8003180:	b09c      	sub	sp, #112	; 0x70
 8003182:	af00      	add	r7, sp, #0
 8003184:	60f8      	str	r0, [r7, #12]
 8003186:	60b9      	str	r1, [r7, #8]
 8003188:	603b      	str	r3, [r7, #0]
 800318a:	4613      	mov	r3, r2
 800318c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800318e:	e0a5      	b.n	80032dc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003190:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003192:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003196:	f000 80a1 	beq.w	80032dc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800319a:	f7fd fc87 	bl	8000aac <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	683b      	ldr	r3, [r7, #0]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80031a6:	429a      	cmp	r2, r3
 80031a8:	d302      	bcc.n	80031b0 <UART_WaitOnFlagUntilTimeout+0x32>
 80031aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d13e      	bne.n	800322e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031b8:	e853 3f00 	ldrex	r3, [r3]
 80031bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80031be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80031c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80031c4:	667b      	str	r3, [r7, #100]	; 0x64
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	461a      	mov	r2, r3
 80031cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80031d0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031d2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80031d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80031d6:	e841 2300 	strex	r3, r2, [r1]
 80031da:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80031dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d1e6      	bne.n	80031b0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	3308      	adds	r3, #8
 80031e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80031ec:	e853 3f00 	ldrex	r3, [r3]
 80031f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80031f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80031f4:	f023 0301 	bic.w	r3, r3, #1
 80031f8:	663b      	str	r3, [r7, #96]	; 0x60
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	3308      	adds	r3, #8
 8003200:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003202:	64ba      	str	r2, [r7, #72]	; 0x48
 8003204:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003206:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003208:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800320a:	e841 2300 	strex	r3, r2, [r1]
 800320e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003210:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003212:	2b00      	cmp	r3, #0
 8003214:	d1e5      	bne.n	80031e2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2220      	movs	r2, #32
 800321a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	2220      	movs	r2, #32
 8003220:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e067      	b.n	80032fe <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0304 	and.w	r3, r3, #4
 8003238:	2b00      	cmp	r3, #0
 800323a:	d04f      	beq.n	80032dc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	69db      	ldr	r3, [r3, #28]
 8003242:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003246:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800324a:	d147      	bne.n	80032dc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003254:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800325c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800325e:	e853 3f00 	ldrex	r3, [r3]
 8003262:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003266:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800326a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	461a      	mov	r2, r3
 8003272:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003274:	637b      	str	r3, [r7, #52]	; 0x34
 8003276:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003278:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800327a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800327c:	e841 2300 	strex	r3, r2, [r1]
 8003280:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003284:	2b00      	cmp	r3, #0
 8003286:	d1e6      	bne.n	8003256 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	3308      	adds	r3, #8
 800328e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	e853 3f00 	ldrex	r3, [r3]
 8003296:	613b      	str	r3, [r7, #16]
   return(result);
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	f023 0301 	bic.w	r3, r3, #1
 800329e:	66bb      	str	r3, [r7, #104]	; 0x68
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	3308      	adds	r3, #8
 80032a6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80032a8:	623a      	str	r2, [r7, #32]
 80032aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ac:	69f9      	ldr	r1, [r7, #28]
 80032ae:	6a3a      	ldr	r2, [r7, #32]
 80032b0:	e841 2300 	strex	r3, r2, [r1]
 80032b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80032b6:	69bb      	ldr	r3, [r7, #24]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d1e5      	bne.n	8003288 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	2220      	movs	r2, #32
 80032c0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2220      	movs	r2, #32
 80032c6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2220      	movs	r2, #32
 80032cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80032d8:	2303      	movs	r3, #3
 80032da:	e010      	b.n	80032fe <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	69da      	ldr	r2, [r3, #28]
 80032e2:	68bb      	ldr	r3, [r7, #8]
 80032e4:	4013      	ands	r3, r2
 80032e6:	68ba      	ldr	r2, [r7, #8]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	bf0c      	ite	eq
 80032ec:	2301      	moveq	r3, #1
 80032ee:	2300      	movne	r3, #0
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	461a      	mov	r2, r3
 80032f4:	79fb      	ldrb	r3, [r7, #7]
 80032f6:	429a      	cmp	r2, r3
 80032f8:	f43f af4a 	beq.w	8003190 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80032fc:	2300      	movs	r3, #0
}
 80032fe:	4618      	mov	r0, r3
 8003300:	3770      	adds	r7, #112	; 0x70
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}
	...

08003308 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003308:	b480      	push	{r7}
 800330a:	b097      	sub	sp, #92	; 0x5c
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	4613      	mov	r3, r2
 8003314:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	68ba      	ldr	r2, [r7, #8]
 800331a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	88fa      	ldrh	r2, [r7, #6]
 8003320:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	88fa      	ldrh	r2, [r7, #6]
 8003328:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	2200      	movs	r2, #0
 8003330:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800333a:	d10e      	bne.n	800335a <UART_Start_Receive_IT+0x52>
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	691b      	ldr	r3, [r3, #16]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d105      	bne.n	8003350 <UART_Start_Receive_IT+0x48>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f240 12ff 	movw	r2, #511	; 0x1ff
 800334a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800334e:	e02d      	b.n	80033ac <UART_Start_Receive_IT+0xa4>
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	22ff      	movs	r2, #255	; 0xff
 8003354:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003358:	e028      	b.n	80033ac <UART_Start_Receive_IT+0xa4>
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d10d      	bne.n	800337e <UART_Start_Receive_IT+0x76>
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	691b      	ldr	r3, [r3, #16]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d104      	bne.n	8003374 <UART_Start_Receive_IT+0x6c>
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	22ff      	movs	r2, #255	; 0xff
 800336e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003372:	e01b      	b.n	80033ac <UART_Start_Receive_IT+0xa4>
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	227f      	movs	r2, #127	; 0x7f
 8003378:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800337c:	e016      	b.n	80033ac <UART_Start_Receive_IT+0xa4>
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003386:	d10d      	bne.n	80033a4 <UART_Start_Receive_IT+0x9c>
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	691b      	ldr	r3, [r3, #16]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d104      	bne.n	800339a <UART_Start_Receive_IT+0x92>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	227f      	movs	r2, #127	; 0x7f
 8003394:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003398:	e008      	b.n	80033ac <UART_Start_Receive_IT+0xa4>
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	223f      	movs	r2, #63	; 0x3f
 800339e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80033a2:	e003      	b.n	80033ac <UART_Start_Receive_IT+0xa4>
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2222      	movs	r2, #34	; 0x22
 80033b8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	3308      	adds	r3, #8
 80033c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033c4:	e853 3f00 	ldrex	r3, [r3]
 80033c8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80033ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033cc:	f043 0301 	orr.w	r3, r3, #1
 80033d0:	657b      	str	r3, [r7, #84]	; 0x54
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	3308      	adds	r3, #8
 80033d8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80033da:	64ba      	str	r2, [r7, #72]	; 0x48
 80033dc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033de:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80033e0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80033e2:	e841 2300 	strex	r3, r2, [r1]
 80033e6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80033e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d1e5      	bne.n	80033ba <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033f6:	d107      	bne.n	8003408 <UART_Start_Receive_IT+0x100>
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	691b      	ldr	r3, [r3, #16]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d103      	bne.n	8003408 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	4a24      	ldr	r2, [pc, #144]	; (8003494 <UART_Start_Receive_IT+0x18c>)
 8003404:	665a      	str	r2, [r3, #100]	; 0x64
 8003406:	e002      	b.n	800340e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	4a23      	ldr	r2, [pc, #140]	; (8003498 <UART_Start_Receive_IT+0x190>)
 800340c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d019      	beq.n	8003452 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003426:	e853 3f00 	ldrex	r3, [r3]
 800342a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800342c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8003432:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	461a      	mov	r2, r3
 800343a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800343c:	637b      	str	r3, [r7, #52]	; 0x34
 800343e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003440:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003442:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003444:	e841 2300 	strex	r3, r2, [r1]
 8003448:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800344a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1e6      	bne.n	800341e <UART_Start_Receive_IT+0x116>
 8003450:	e018      	b.n	8003484 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	e853 3f00 	ldrex	r3, [r3]
 800345e:	613b      	str	r3, [r7, #16]
   return(result);
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	f043 0320 	orr.w	r3, r3, #32
 8003466:	653b      	str	r3, [r7, #80]	; 0x50
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	461a      	mov	r2, r3
 800346e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003470:	623b      	str	r3, [r7, #32]
 8003472:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003474:	69f9      	ldr	r1, [r7, #28]
 8003476:	6a3a      	ldr	r2, [r7, #32]
 8003478:	e841 2300 	strex	r3, r2, [r1]
 800347c:	61bb      	str	r3, [r7, #24]
   return(result);
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d1e6      	bne.n	8003452 <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 8003484:	2300      	movs	r3, #0
}
 8003486:	4618      	mov	r0, r3
 8003488:	375c      	adds	r7, #92	; 0x5c
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	080038b5 	.word	0x080038b5
 8003498:	08003759 	.word	0x08003759

0800349c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800349c:	b480      	push	{r7}
 800349e:	b095      	sub	sp, #84	; 0x54
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034ac:	e853 3f00 	ldrex	r3, [r3]
 80034b0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80034b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80034b8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	461a      	mov	r2, r3
 80034c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034c2:	643b      	str	r3, [r7, #64]	; 0x40
 80034c4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80034c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80034ca:	e841 2300 	strex	r3, r2, [r1]
 80034ce:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80034d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d1e6      	bne.n	80034a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	3308      	adds	r3, #8
 80034dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034de:	6a3b      	ldr	r3, [r7, #32]
 80034e0:	e853 3f00 	ldrex	r3, [r3]
 80034e4:	61fb      	str	r3, [r7, #28]
   return(result);
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	f023 0301 	bic.w	r3, r3, #1
 80034ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	3308      	adds	r3, #8
 80034f4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80034f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034fe:	e841 2300 	strex	r3, r2, [r1]
 8003502:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003506:	2b00      	cmp	r3, #0
 8003508:	d1e5      	bne.n	80034d6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800350e:	2b01      	cmp	r3, #1
 8003510:	d118      	bne.n	8003544 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	e853 3f00 	ldrex	r3, [r3]
 800351e:	60bb      	str	r3, [r7, #8]
   return(result);
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	f023 0310 	bic.w	r3, r3, #16
 8003526:	647b      	str	r3, [r7, #68]	; 0x44
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	461a      	mov	r2, r3
 800352e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003530:	61bb      	str	r3, [r7, #24]
 8003532:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003534:	6979      	ldr	r1, [r7, #20]
 8003536:	69ba      	ldr	r2, [r7, #24]
 8003538:	e841 2300 	strex	r3, r2, [r1]
 800353c:	613b      	str	r3, [r7, #16]
   return(result);
 800353e:	693b      	ldr	r3, [r7, #16]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d1e6      	bne.n	8003512 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2220      	movs	r2, #32
 8003548:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003556:	bf00      	nop
 8003558:	3754      	adds	r7, #84	; 0x54
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr

08003562 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003562:	b580      	push	{r7, lr}
 8003564:	b084      	sub	sp, #16
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800356e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	2200      	movs	r2, #0
 8003574:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003580:	68f8      	ldr	r0, [r7, #12]
 8003582:	f7ff fa8f 	bl	8002aa4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003586:	bf00      	nop
 8003588:	3710      	adds	r7, #16
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}

0800358e <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800358e:	b480      	push	{r7}
 8003590:	b08f      	sub	sp, #60	; 0x3c
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800359a:	2b21      	cmp	r3, #33	; 0x21
 800359c:	d14c      	bne.n	8003638 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80035a4:	b29b      	uxth	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d132      	bne.n	8003610 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035b0:	6a3b      	ldr	r3, [r7, #32]
 80035b2:	e853 3f00 	ldrex	r3, [r3]
 80035b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80035b8:	69fb      	ldr	r3, [r7, #28]
 80035ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035be:	637b      	str	r3, [r7, #52]	; 0x34
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	461a      	mov	r2, r3
 80035c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80035c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035ca:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035cc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80035ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80035d0:	e841 2300 	strex	r3, r2, [r1]
 80035d4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80035d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d1e6      	bne.n	80035aa <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	e853 3f00 	ldrex	r3, [r3]
 80035e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035f0:	633b      	str	r3, [r7, #48]	; 0x30
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	461a      	mov	r2, r3
 80035f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035fa:	61bb      	str	r3, [r7, #24]
 80035fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035fe:	6979      	ldr	r1, [r7, #20]
 8003600:	69ba      	ldr	r2, [r7, #24]
 8003602:	e841 2300 	strex	r3, r2, [r1]
 8003606:	613b      	str	r3, [r7, #16]
   return(result);
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1e6      	bne.n	80035dc <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800360e:	e013      	b.n	8003638 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003614:	781a      	ldrb	r2, [r3, #0]
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003620:	1c5a      	adds	r2, r3, #1
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800362c:	b29b      	uxth	r3, r3
 800362e:	3b01      	subs	r3, #1
 8003630:	b29a      	uxth	r2, r3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8003638:	bf00      	nop
 800363a:	373c      	adds	r7, #60	; 0x3c
 800363c:	46bd      	mov	sp, r7
 800363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003642:	4770      	bx	lr

08003644 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003644:	b480      	push	{r7}
 8003646:	b091      	sub	sp, #68	; 0x44
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003650:	2b21      	cmp	r3, #33	; 0x21
 8003652:	d151      	bne.n	80036f8 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800365a:	b29b      	uxth	r3, r3
 800365c:	2b00      	cmp	r3, #0
 800365e:	d132      	bne.n	80036c6 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003668:	e853 3f00 	ldrex	r3, [r3]
 800366c:	623b      	str	r3, [r7, #32]
   return(result);
 800366e:	6a3b      	ldr	r3, [r7, #32]
 8003670:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003674:	63bb      	str	r3, [r7, #56]	; 0x38
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	461a      	mov	r2, r3
 800367c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800367e:	633b      	str	r3, [r7, #48]	; 0x30
 8003680:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003682:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003684:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003686:	e841 2300 	strex	r3, r2, [r1]
 800368a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800368c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800368e:	2b00      	cmp	r3, #0
 8003690:	d1e6      	bne.n	8003660 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	e853 3f00 	ldrex	r3, [r3]
 800369e:	60fb      	str	r3, [r7, #12]
   return(result);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036a6:	637b      	str	r3, [r7, #52]	; 0x34
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	461a      	mov	r2, r3
 80036ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036b0:	61fb      	str	r3, [r7, #28]
 80036b2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036b4:	69b9      	ldr	r1, [r7, #24]
 80036b6:	69fa      	ldr	r2, [r7, #28]
 80036b8:	e841 2300 	strex	r3, r2, [r1]
 80036bc:	617b      	str	r3, [r7, #20]
   return(result);
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d1e6      	bne.n	8003692 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80036c4:	e018      	b.n	80036f8 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036ca:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80036cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036ce:	881b      	ldrh	r3, [r3, #0]
 80036d0:	461a      	mov	r2, r3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80036da:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80036e0:	1c9a      	adds	r2, r3, #2
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	3b01      	subs	r3, #1
 80036f0:	b29a      	uxth	r2, r3
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80036f8:	bf00      	nop
 80036fa:	3744      	adds	r7, #68	; 0x44
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b088      	sub	sp, #32
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	e853 3f00 	ldrex	r3, [r3]
 8003718:	60bb      	str	r3, [r7, #8]
   return(result);
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003720:	61fb      	str	r3, [r7, #28]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	461a      	mov	r2, r3
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	61bb      	str	r3, [r7, #24]
 800372c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800372e:	6979      	ldr	r1, [r7, #20]
 8003730:	69ba      	ldr	r2, [r7, #24]
 8003732:	e841 2300 	strex	r3, r2, [r1]
 8003736:	613b      	str	r3, [r7, #16]
   return(result);
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d1e6      	bne.n	800370c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2220      	movs	r2, #32
 8003742:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800374a:	6878      	ldr	r0, [r7, #4]
 800374c:	f7ff f9a0 	bl	8002a90 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003750:	bf00      	nop
 8003752:	3720      	adds	r7, #32
 8003754:	46bd      	mov	sp, r7
 8003756:	bd80      	pop	{r7, pc}

08003758 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b096      	sub	sp, #88	; 0x58
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003766:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800376e:	2b22      	cmp	r3, #34	; 0x22
 8003770:	f040 8094 	bne.w	800389c <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800377a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800377e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8003782:	b2d9      	uxtb	r1, r3
 8003784:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003788:	b2da      	uxtb	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800378e:	400a      	ands	r2, r1
 8003790:	b2d2      	uxtb	r2, r2
 8003792:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003798:	1c5a      	adds	r2, r3, #1
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	3b01      	subs	r3, #1
 80037a8:	b29a      	uxth	r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d177      	bne.n	80038ac <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037c4:	e853 3f00 	ldrex	r3, [r3]
 80037c8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80037ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80037cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80037d0:	653b      	str	r3, [r7, #80]	; 0x50
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	461a      	mov	r2, r3
 80037d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037da:	647b      	str	r3, [r7, #68]	; 0x44
 80037dc:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80037e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80037e2:	e841 2300 	strex	r3, r2, [r1]
 80037e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80037e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d1e6      	bne.n	80037bc <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	3308      	adds	r3, #8
 80037f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f8:	e853 3f00 	ldrex	r3, [r3]
 80037fc:	623b      	str	r3, [r7, #32]
   return(result);
 80037fe:	6a3b      	ldr	r3, [r7, #32]
 8003800:	f023 0301 	bic.w	r3, r3, #1
 8003804:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	3308      	adds	r3, #8
 800380c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800380e:	633a      	str	r2, [r7, #48]	; 0x30
 8003810:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003812:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003814:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003816:	e841 2300 	strex	r3, r2, [r1]
 800381a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800381c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800381e:	2b00      	cmp	r3, #0
 8003820:	d1e5      	bne.n	80037ee <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2220      	movs	r2, #32
 8003826:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003832:	2b01      	cmp	r3, #1
 8003834:	d12e      	bne.n	8003894 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003842:	693b      	ldr	r3, [r7, #16]
 8003844:	e853 3f00 	ldrex	r3, [r3]
 8003848:	60fb      	str	r3, [r7, #12]
   return(result);
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	f023 0310 	bic.w	r3, r3, #16
 8003850:	64bb      	str	r3, [r7, #72]	; 0x48
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	461a      	mov	r2, r3
 8003858:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800385a:	61fb      	str	r3, [r7, #28]
 800385c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800385e:	69b9      	ldr	r1, [r7, #24]
 8003860:	69fa      	ldr	r2, [r7, #28]
 8003862:	e841 2300 	strex	r3, r2, [r1]
 8003866:	617b      	str	r3, [r7, #20]
   return(result);
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1e6      	bne.n	800383c <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	69db      	ldr	r3, [r3, #28]
 8003874:	f003 0310 	and.w	r3, r3, #16
 8003878:	2b10      	cmp	r3, #16
 800387a:	d103      	bne.n	8003884 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2210      	movs	r2, #16
 8003882:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800388a:	4619      	mov	r1, r3
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f7ff f913 	bl	8002ab8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8003892:	e00b      	b.n	80038ac <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f7fc ff17 	bl	80006c8 <HAL_UART_RxCpltCallback>
}
 800389a:	e007      	b.n	80038ac <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	699a      	ldr	r2, [r3, #24]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f042 0208 	orr.w	r2, r2, #8
 80038aa:	619a      	str	r2, [r3, #24]
}
 80038ac:	bf00      	nop
 80038ae:	3758      	adds	r7, #88	; 0x58
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}

080038b4 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b096      	sub	sp, #88	; 0x58
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80038c2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80038ca:	2b22      	cmp	r3, #34	; 0x22
 80038cc:	f040 8094 	bne.w	80039f8 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038de:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80038e0:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80038e4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80038e8:	4013      	ands	r3, r2
 80038ea:	b29a      	uxth	r2, r3
 80038ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80038ee:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038f4:	1c9a      	adds	r2, r3, #2
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003900:	b29b      	uxth	r3, r3
 8003902:	3b01      	subs	r3, #1
 8003904:	b29a      	uxth	r2, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003912:	b29b      	uxth	r3, r3
 8003914:	2b00      	cmp	r3, #0
 8003916:	d177      	bne.n	8003a08 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800391e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003920:	e853 3f00 	ldrex	r3, [r3]
 8003924:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003928:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800392c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	461a      	mov	r2, r3
 8003934:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003936:	643b      	str	r3, [r7, #64]	; 0x40
 8003938:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800393a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800393c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800393e:	e841 2300 	strex	r3, r2, [r1]
 8003942:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003946:	2b00      	cmp	r3, #0
 8003948:	d1e6      	bne.n	8003918 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	3308      	adds	r3, #8
 8003950:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003952:	6a3b      	ldr	r3, [r7, #32]
 8003954:	e853 3f00 	ldrex	r3, [r3]
 8003958:	61fb      	str	r3, [r7, #28]
   return(result);
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	f023 0301 	bic.w	r3, r3, #1
 8003960:	64bb      	str	r3, [r7, #72]	; 0x48
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	3308      	adds	r3, #8
 8003968:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800396a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800396c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800396e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003970:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003972:	e841 2300 	strex	r3, r2, [r1]
 8003976:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397a:	2b00      	cmp	r3, #0
 800397c:	d1e5      	bne.n	800394a <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2220      	movs	r2, #32
 8003982:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800398e:	2b01      	cmp	r3, #1
 8003990:	d12e      	bne.n	80039f0 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	e853 3f00 	ldrex	r3, [r3]
 80039a4:	60bb      	str	r3, [r7, #8]
   return(result);
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	f023 0310 	bic.w	r3, r3, #16
 80039ac:	647b      	str	r3, [r7, #68]	; 0x44
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	461a      	mov	r2, r3
 80039b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039b6:	61bb      	str	r3, [r7, #24]
 80039b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ba:	6979      	ldr	r1, [r7, #20]
 80039bc:	69ba      	ldr	r2, [r7, #24]
 80039be:	e841 2300 	strex	r3, r2, [r1]
 80039c2:	613b      	str	r3, [r7, #16]
   return(result);
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d1e6      	bne.n	8003998 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	69db      	ldr	r3, [r3, #28]
 80039d0:	f003 0310 	and.w	r3, r3, #16
 80039d4:	2b10      	cmp	r3, #16
 80039d6:	d103      	bne.n	80039e0 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	2210      	movs	r2, #16
 80039de:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80039e6:	4619      	mov	r1, r3
 80039e8:	6878      	ldr	r0, [r7, #4]
 80039ea:	f7ff f865 	bl	8002ab8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80039ee:	e00b      	b.n	8003a08 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f7fc fe69 	bl	80006c8 <HAL_UART_RxCpltCallback>
}
 80039f6:	e007      	b.n	8003a08 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	699a      	ldr	r2, [r3, #24]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f042 0208 	orr.w	r2, r2, #8
 8003a06:	619a      	str	r2, [r3, #24]
}
 8003a08:	bf00      	nop
 8003a0a:	3758      	adds	r7, #88	; 0x58
 8003a0c:	46bd      	mov	sp, r7
 8003a0e:	bd80      	pop	{r7, pc}

08003a10 <__libc_init_array>:
 8003a10:	b570      	push	{r4, r5, r6, lr}
 8003a12:	4d0d      	ldr	r5, [pc, #52]	; (8003a48 <__libc_init_array+0x38>)
 8003a14:	4c0d      	ldr	r4, [pc, #52]	; (8003a4c <__libc_init_array+0x3c>)
 8003a16:	1b64      	subs	r4, r4, r5
 8003a18:	10a4      	asrs	r4, r4, #2
 8003a1a:	2600      	movs	r6, #0
 8003a1c:	42a6      	cmp	r6, r4
 8003a1e:	d109      	bne.n	8003a34 <__libc_init_array+0x24>
 8003a20:	4d0b      	ldr	r5, [pc, #44]	; (8003a50 <__libc_init_array+0x40>)
 8003a22:	4c0c      	ldr	r4, [pc, #48]	; (8003a54 <__libc_init_array+0x44>)
 8003a24:	f000 f828 	bl	8003a78 <_init>
 8003a28:	1b64      	subs	r4, r4, r5
 8003a2a:	10a4      	asrs	r4, r4, #2
 8003a2c:	2600      	movs	r6, #0
 8003a2e:	42a6      	cmp	r6, r4
 8003a30:	d105      	bne.n	8003a3e <__libc_init_array+0x2e>
 8003a32:	bd70      	pop	{r4, r5, r6, pc}
 8003a34:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a38:	4798      	blx	r3
 8003a3a:	3601      	adds	r6, #1
 8003a3c:	e7ee      	b.n	8003a1c <__libc_init_array+0xc>
 8003a3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003a42:	4798      	blx	r3
 8003a44:	3601      	adds	r6, #1
 8003a46:	e7f2      	b.n	8003a2e <__libc_init_array+0x1e>
 8003a48:	08003ab0 	.word	0x08003ab0
 8003a4c:	08003ab0 	.word	0x08003ab0
 8003a50:	08003ab0 	.word	0x08003ab0
 8003a54:	08003ab4 	.word	0x08003ab4

08003a58 <memset>:
 8003a58:	4402      	add	r2, r0
 8003a5a:	4603      	mov	r3, r0
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d100      	bne.n	8003a62 <memset+0xa>
 8003a60:	4770      	bx	lr
 8003a62:	f803 1b01 	strb.w	r1, [r3], #1
 8003a66:	e7f9      	b.n	8003a5c <memset+0x4>

08003a68 <strcpy>:
 8003a68:	4603      	mov	r3, r0
 8003a6a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8003a6e:	f803 2b01 	strb.w	r2, [r3], #1
 8003a72:	2a00      	cmp	r2, #0
 8003a74:	d1f9      	bne.n	8003a6a <strcpy+0x2>
 8003a76:	4770      	bx	lr

08003a78 <_init>:
 8003a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a7a:	bf00      	nop
 8003a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a7e:	bc08      	pop	{r3}
 8003a80:	469e      	mov	lr, r3
 8003a82:	4770      	bx	lr

08003a84 <_fini>:
 8003a84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a86:	bf00      	nop
 8003a88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a8a:	bc08      	pop	{r3}
 8003a8c:	469e      	mov	lr, r3
 8003a8e:	4770      	bx	lr
